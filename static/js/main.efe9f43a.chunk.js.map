{"version":3,"sources":["expenseKind.ts","model/calculator.ts","maths/parser.ts","state/selectors.ts","components/CheckTable.tsx","components/AddButton.tsx","components/AddForm.tsx","state/types.ts","components/PriceInputField.tsx","components/AddName.tsx","state/actions.ts","components/AddExpense.tsx","components/LeftMenu.tsx","components/ExpenseHistory.tsx","components/Calculator.tsx","App.tsx","serviceWorker.ts","state/utils.ts","state/reducers.ts","index.tsx","model/localstorage.ts"],"names":["ExpenseKind","expenseKindToString","kind","Percentage","SplitEqually","SplitProportionally","TokenKind","PersonWithExpenses","person","expenses","total","this","basePrice","reduce","a","b","expense","push","getCurrentTotalPrice","computeExpenses","people","peopleCount","length","totalBasePrice","map","peopleWithExpenses","prices","payload","Array","from","finalPrices","targetPrice","res","p","Math","floor","neededCents","curr","v","i","equilibrate","forEach","index","addExpense","finalize","peopleSelector","state","expensesSelector","StyledTableCell","withStyles","theme","createStyles","head","backgroundColor","palette","secondary","main","color","common","white","fontWeight","footer","primary","fontSize","TableCell","useStyles","makeStyles","root","width","marginBottom","spacing","table","maxHeight","numberDisplay","value","toFixed","CheckTable","classes","useSelector","Paper","className","elevation","TableContainer","Table","stickyHeader","TableHead","TableRow","align","key","name","TableBody","TableFooter","colSpan","AddButton","Button","variant","size","type","startIcon","padding","headerIcon","marginRight","header","display","alignItems","AddForm","title","Icon","handleSubmit","children","Typography","onSubmit","event","preventDefault","defaultExpensesState","counter","PriceInputField","label","percentage","handleChange","innerHandleChange","parseFloat","target","isNaN","undefined","TextField","margin","fullWidth","InputProps","endAdornment","InputAdornment","position","InputLabelProps","shrink","inputProps","min","max","onChange","startAdornment","NameEdit","editId","useState","formState","setFormState","dispatch","useDispatch","PersonIcon","console","log","price","AddName","formRow","justifyContent","formRowItemLeft","breakpoints","up","paddingRight","formRowItemRight","paddingLeft","AddExpense","MoneyIcon","Grid","container","item","xs","sm","FormControl","InputLabel","id","Select","labelId","labelWidth","MenuItem","drawerHeader","mixins","toolbar","reloadServiceWorker","navigator","serviceWorker","getRegistration","then","reg","unregister","window","location","reload","LeftMenu","open","closeCallback","Drawer","IconButton","onClick","Divider","List","ListItem","button","ListItemIcon","ListItemText","marginTop","ExpenseHistoryItem","primaryText","dollars","abs","formatExpensePayload","ListItemSecondaryAction","edge","ExpenseHistory","FLOAT_REGEX","Lexer","input","currentIndex","bufferToken","currentChar","trim","eatWhitespaces","c","Symbol","Operator","floatMatch","substring","match","floatString","Number","Error","token","innerNextToken","nextToken","BinOpExpression","lhs","rhs","op","LiteralExpression","literal","Parser","lexer","peekToken","parseAddExpression","expect","expression","parseExpression","expr","parseMulExpression","advance","parseAtom","parseParenthesisExpression","alert","result","Calculator","content","setContent","setResult","error","setError","Alert","severity","evaluate","err","message","toString","htmlFor","OutlinedInput","menuButton","flexGrow","App","isMenuOpened","setMenuOpened","Fragment","CssBaseline","AppBar","Toolbar","aria-label","Container","fixed","md","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","convertToCents","num","n","f","round","bankersRounding","reducer","combineReducers","action","filter","loadedState","localStorage","getItem","JSON","parse","version","loadState","store","createStore","composeWithDevTools","subscribe","setItem","stringify","storeState","getState","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.efe9f43a.chunk.js","sourcesContent":["export enum ExpenseKind {\n    Percentage,\n    SplitEqually,\n    SplitProportionally,\n}\n\nexport function expenseKindToString(kind: ExpenseKind): string {\n    switch (kind) {\n        case ExpenseKind.Percentage:\n            return 'Percentage';\n        case ExpenseKind.SplitEqually:\n            return 'Split Equally';\n        case ExpenseKind.SplitProportionally:\n            return 'Split Proportionally';\n    }\n}\n","import { Person, Expense } from '../state/types';\nimport { ExpenseKind } from '../expenseKind';\n\nconst equilibrate = (prices: Array<number>, targetPrice: number): Array<number> => {\n    const res = prices.map(p => Math.floor(p));\n\n    const currentPrice = res.reduce((curr, v) => curr + v, 0);\n    const neededCents = targetPrice - currentPrice;\n\n    for (let i = 0; i < neededCents; i++) {\n        res[i] += 1;\n    }\n\n    return res;\n};\n\nexport class PersonWithExpenses {\n    person: Person;\n    expenses: Array<number>;\n    total: number;\n\n    constructor(person: Person) {\n        this.person = person;\n        this.expenses = [];\n        this.total = 0.0;\n    }\n\n    getCurrentTotalPrice(): number {\n        return this.person.basePrice + this.expenses.reduce((a, b) => a + b, 0);\n    }\n\n    addExpense(expense: number): void {\n        this.expenses.push(expense);\n    }\n\n    finalize(): void {\n        this.total = this.getCurrentTotalPrice();\n    }\n}\n\nexport const computeExpenses = (people: Array<Person>, expenses: Array<Expense>): Array<PersonWithExpenses> => {\n    const peopleCount = people.length;\n    const totalBasePrice = people.map(person => person.basePrice).reduce((a, b) => a + b, 0);\n\n    const peopleWithExpenses = people.map(person => {\n        return new PersonWithExpenses(person);\n    });\n\n    for (const expense of expenses) {\n        let prices;\n        switch (expense.kind) {\n            case ExpenseKind.Percentage:\n                prices = peopleWithExpenses.map(person => {\n                    return (expense.payload * person.getCurrentTotalPrice()) / 100;\n                });\n                break;\n            case ExpenseKind.SplitEqually:\n                prices = Array.from({ length: peopleCount }, () => expense.payload / peopleCount);\n                break;\n            case ExpenseKind.SplitProportionally:\n                prices = peopleWithExpenses.map(person => {\n                    const percent = person.person.basePrice / totalBasePrice;\n                    return percent * expense.payload;\n                });\n                break;\n        }\n\n        const finalPrices = equilibrate(prices, expense.payload);\n\n        peopleWithExpenses.forEach((person, index) => {\n            person.addExpense(finalPrices[index]);\n        });\n    }\n\n    peopleWithExpenses.forEach(person => person.finalize());\n    return peopleWithExpenses;\n};\n","enum TokenKind {\n    Number,\n    Symbol,\n    Operator,\n}\n\ninterface NumberToken {\n    type: TokenKind.Number;\n    value: number;\n}\n\ninterface SymbolToken {\n    type: TokenKind.Symbol;\n    value: '(' | ')';\n}\n\ntype OperatorKind = '+' | '-' | '*' | '/';\n\ninterface OperatorToken {\n    type: TokenKind.Operator;\n    value: OperatorKind;\n}\n\ntype Token = NumberToken | SymbolToken | OperatorToken;\n\nconst FLOAT_REGEX = /^\\d+(\\.\\d+)?/;\n\nclass Lexer {\n    input: string;\n    currentIndex: number;\n    bufferToken?: Token;\n\n    constructor(input: string) {\n        this.input = input;\n        this.currentIndex = 0;\n    }\n\n    currentChar(): string {\n        return this.input[this.currentIndex];\n    }\n\n    eatWhitespaces(): void {\n        // we loop while the current char is a whitespace\n        while (this.currentIndex < this.input.length && this.currentChar().trim().length === 0) {\n            this.currentIndex += 1;\n        }\n        return;\n    }\n\n    innerNextToken(): Token | null {\n        this.eatWhitespaces();\n        if (this.currentIndex >= this.input.length) {\n            return null;\n        }\n\n        const c = this.currentChar();\n        if (c === '(' || c === ')') {\n            this.currentIndex += 1;\n            return { type: TokenKind.Symbol, value: c };\n        } else if (c === '+' || c === '-' || c === '*' || c === '/') {\n            this.currentIndex += 1;\n            return { type: TokenKind.Operator, value: c };\n        } else {\n            const floatMatch = this.input.substring(this.currentIndex).match(FLOAT_REGEX);\n            if (floatMatch) {\n                const floatString = floatMatch[0];\n                this.currentIndex += floatString.length;\n                const value = parseFloat(floatString);\n                return { type: TokenKind.Number, value };\n            }\n        }\n\n        throw new Error(`Unknown character in input string: '${c}'`);\n    }\n\n    nextToken(): Token | null {\n        if (this.bufferToken) {\n            const token = this.bufferToken;\n            this.bufferToken = undefined;\n            return token;\n        }\n\n        return this.innerNextToken();\n    }\n\n    peekToken(): Token | null {\n        if (this.bufferToken) {\n            return this.bufferToken;\n        }\n\n        const token = this.innerNextToken();\n        if (token) {\n            this.bufferToken = token;\n        }\n        return token;\n    }\n\n    advance(): void {\n        // we ignore the next token\n        this.nextToken();\n    }\n}\n\ninterface Expression {\n    value(): number;\n}\n\nclass BinOpExpression implements Expression {\n    lhs: Expression;\n    rhs: Expression;\n    op: OperatorKind;\n\n    constructor(lhs: Expression, rhs: Expression, op: OperatorKind) {\n        this.lhs = lhs;\n        this.rhs = rhs;\n        this.op = op;\n    }\n\n    value(): number {\n        switch (this.op) {\n            case '*':\n                return this.lhs.value() * this.rhs.value();\n            case '+':\n                return this.lhs.value() + this.rhs.value();\n            case '-':\n                return this.lhs.value() - this.rhs.value();\n            case '/':\n                return this.lhs.value() / this.rhs.value();\n        }\n    }\n}\n\nclass LiteralExpression implements Expression {\n    literal: number;\n\n    constructor(literal: number) {\n        this.literal = literal;\n    }\n\n    value(): number {\n        return this.literal;\n    }\n}\n\nclass Parser {\n    lexer: Lexer;\n\n    constructor(lexer: Lexer) {\n        this.lexer = lexer;\n    }\n\n    expect(type: TokenKind, value?: any): void {\n        const token = this.lexer.nextToken();\n        if (token && token.type === type && token.value === value) {\n            return;\n        }\n        throw new Error('Unexpected token');\n    }\n\n    parseExpression(): Expression | null {\n        const token = this.lexer.peekToken();\n        if (!token) {\n            return null;\n        }\n\n        return this.parseAddExpression();\n    }\n\n    parseParenthesisExpression(): Expression {\n        this.expect(TokenKind.Symbol, '(');\n        const expression = this.parseExpression();\n        if (!expression) {\n            throw new Error('Unexpected EOL');\n        }\n        this.expect(TokenKind.Symbol, ')');\n        return expression;\n    }\n\n    parseAddExpression(): Expression {\n        let expr = this.parseMulExpression();\n        while (true) {\n            const token = this.lexer.peekToken();\n            if (token && token.type === TokenKind.Operator && (token.value === '+' || token.value === '-')) {\n                this.lexer.advance();\n                const rhs = this.parseMulExpression();\n                expr = new BinOpExpression(expr, rhs, token.value);\n            } else {\n                break;\n            }\n        }\n        return expr;\n    }\n    parseMulExpression(): Expression {\n        let expr = this.parseAtom();\n        while (true) {\n            const token = this.lexer.peekToken();\n            if (token && token.type === TokenKind.Operator && (token.value === '*' || token.value === '/')) {\n                this.lexer.advance();\n                const rhs = this.parseAtom();\n                expr = new BinOpExpression(expr, rhs, token.value);\n            } else {\n                break;\n            }\n        }\n        return expr;\n    }\n\n    parseAtom(): Expression {\n        const token = this.lexer.peekToken();\n        if (!token) {\n            throw new Error('Expected atom');\n        }\n\n        if (token.type === TokenKind.Number) {\n            this.lexer.advance();\n            return new LiteralExpression(token.value);\n        } else if (token.type === TokenKind.Symbol && token.value === '(') {\n            return this.parseParenthesisExpression();\n        } else {\n            throw new Error('Unexpected token');\n        }\n    }\n}\n\nexport const evaluate = (input: string): number | null => {\n    const lexer = new Lexer(input);\n    const parser = new Parser(lexer);\n    const expression = parser.parseExpression();\n    if (expression) {\n        return expression.value();\n    } else {\n        return null;\n    }\n};\n","import { State } from './reducers';\nimport { Person, Expense } from './types';\n\nexport const peopleSelector = (state: State): Array<Person> => {\n    return state.people;\n};\n\nexport const expensesSelector = (state: State): Array<Expense> => {\n    return state.expenses.expenses;\n};\n","import React from 'react';\nimport {\n    Paper,\n    Table,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    makeStyles,\n    withStyles,\n    createStyles,\n    TableFooter,\n} from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { computeExpenses } from '../model/calculator';\nimport { peopleSelector, expensesSelector } from '../state/selectors';\n\ninterface Row {\n    name: string;\n    basePrice: number;\n    tip: number;\n}\n\nconst StyledTableCell = withStyles(theme => {\n    return createStyles({\n        head: {\n            backgroundColor: theme.palette.secondary.main,\n            color: theme.palette.common.white,\n            fontWeight: 'bold',\n        },\n        footer: {\n            color: theme.palette.primary.main,\n            fontWeight: 'bold',\n            fontSize: '1.1em',\n        },\n    });\n})(TableCell);\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        maxHeight: '50vh',\n    },\n}));\n\nconst numberDisplay = (value: number): string => {\n    return (value / 100).toFixed(2);\n};\n\nexport const CheckTable: React.FC = () => {\n    const classes = useStyles();\n\n    const people = useSelector(peopleSelector);\n    const expenses = useSelector(expensesSelector);\n\n    const peopleWithExpenses = computeExpenses(people, expenses);\n    const total = peopleWithExpenses.map(people => people.total).reduce((a, b) => a + b, 0);\n\n    return (\n        <Paper className={classes.root} elevation={3}>\n            <TableContainer className={classes.table}>\n                <Table stickyHeader>\n                    <TableHead>\n                        <TableRow>\n                            <StyledTableCell align=\"left\">Name</StyledTableCell>\n                            <StyledTableCell align=\"right\">Base Price</StyledTableCell>\n                            {expenses.map((expense, index) => {\n                                return (\n                                    <StyledTableCell align=\"right\" key={index}>\n                                        {expense.name}\n                                    </StyledTableCell>\n                                );\n                            })}\n                            <StyledTableCell align=\"right\">Total</StyledTableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {peopleWithExpenses.map((person, index) => {\n                            return (\n                                <TableRow key={index}>\n                                    <TableCell align=\"left\">{person.person.name}</TableCell>\n                                    <TableCell align=\"right\">{numberDisplay(person.person.basePrice)}</TableCell>\n                                    {person.expenses.map((expense, index) => {\n                                        return (\n                                            <TableCell align=\"right\" key={index}>\n                                                {numberDisplay(expense)}\n                                            </TableCell>\n                                        );\n                                    })}\n                                    <TableCell align=\"right\">{numberDisplay(person.total)}</TableCell>\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                    <TableFooter>\n                        <TableRow>\n                            <StyledTableCell align=\"left\">Total</StyledTableCell>\n                            <StyledTableCell align=\"right\" colSpan={expenses.length + 2}>\n                                {numberDisplay(total)}\n                            </StyledTableCell>\n                        </TableRow>\n                    </TableFooter>\n                </Table>\n            </TableContainer>\n        </Paper>\n    );\n};\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\n\nexport const AddButton: React.FC = () => {\n    return (\n        <Button color=\"primary\" variant=\"contained\" size=\"large\" type=\"submit\" startIcon={<AddIcon />}>\n            Add\n        </Button>\n    );\n};\n","import React from 'react';\nimport { makeStyles, Paper, Typography, SvgIconProps } from '@material-ui/core';\nimport { AddButton } from './AddButton';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n    headerIcon: {\n        marginRight: theme.spacing(1),\n    },\n    header: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\ninterface AddFormProps {\n    title: string;\n    Icon(props: SvgIconProps): JSX.Element;\n    handleSubmit?(event: React.FormEvent<HTMLFormElement>): void;\n}\n\nexport const AddForm: React.FC<AddFormProps> = ({ title, Icon, handleSubmit, children }) => {\n    const classes = useStyles();\n    const preventAndHandleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n        if (handleSubmit) {\n            handleSubmit(event);\n        }\n    };\n\n    return (\n        <Paper elevation={3} className={classes.root}>\n            <div className={classes.header}>\n                <Icon fontSize=\"large\" className={classes.headerIcon} />\n                <Typography variant=\"h5\">{title}</Typography>\n            </div>\n            <form onSubmit={preventAndHandleSubmit}>\n                {children}\n                <AddButton />\n            </form>\n        </Paper>\n    );\n};\n","import { ExpenseKind } from '../expenseKind';\n\nexport const RESET_STATE = 'RESET_STATE';\nexport const ADD_PERSON = 'ADD_PERSON';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const REMOVE_EXPENSE = 'REMOVE_EXPENSE';\n\n// Last changed when adding ids to expenses\nexport const stateVersion = 2;\n\nexport interface Person {\n    name: string;\n    basePrice: number;\n}\n\nexport interface Expense {\n    id: number;\n    name: string;\n    payload: number;\n    kind: ExpenseKind;\n}\n\nexport type PeopleState = Array<Person>;\n\nexport interface ExpensesState {\n    counter: number;\n    expenses: Array<Expense>;\n}\n\nexport const defaultExpensesState: ExpensesState = {\n    counter: 0,\n    expenses: [],\n};\n","import React from 'react';\nimport { TextField, InputAdornment } from '@material-ui/core';\n\nexport interface PriceInputProps {\n    label: string;\n    name: string;\n    percentage?: boolean;\n    value?: number;\n    handleChange(price: number | undefined): void;\n}\n\nexport const PriceInputField: React.FC<PriceInputProps> = ({ label, name, percentage, value, handleChange }) => {\n    const innerHandleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        let payload: number | undefined = parseFloat(event.target.value);\n        if (isNaN(payload)) {\n            payload = undefined;\n        }\n        handleChange(payload);\n    };\n\n    if (percentage) {\n        return (\n            <TextField\n                label={label}\n                variant=\"outlined\"\n                margin=\"normal\"\n                name={name}\n                fullWidth\n                InputProps={{\n                    endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n                }}\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                type=\"number\"\n                inputProps={{\n                    min: 0,\n                    max: 100,\n                }}\n                value={value || ''}\n                onChange={innerHandleChange}\n            />\n        );\n    } else {\n        return (\n            <TextField\n                label={label}\n                variant=\"outlined\"\n                margin=\"normal\"\n                name={name}\n                value={value || ''}\n                fullWidth\n                InputProps={{\n                    startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                }}\n                type=\"number\"\n                onChange={innerHandleChange}\n            />\n        );\n    }\n};\n","import React, { useState } from 'react';\nimport { TextField } from '@material-ui/core';\nimport PersonIcon from '@material-ui/icons/Person';\nimport { AddForm } from './AddForm';\nimport { useDispatch } from 'react-redux';\nimport { addPerson } from '../state/actions';\nimport { PriceInputField } from './PriceInputField';\n\ninterface PersonFormState {\n    name: string;\n    basePrice?: number;\n}\n\ninterface NameEditProps {\n    title: string;\n    editId?: number;\n}\n\nconst NameEdit: React.FC<NameEditProps> = ({ title, editId }) => {\n    const [formState, setFormState] = useState<PersonFormState>({ name: '' });\n\n    const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        const value = event.target.value;\n        setFormState(state => ({ ...state, name: value }));\n    };\n\n    const dispatch = useDispatch();\n\n    const handleSubmit = (): void => {\n        if (formState.name !== '' && formState.basePrice && formState.basePrice > 0) {\n            if (editId) {\n                console.log('Edit dispatch: ' + editId);\n            } else {\n                dispatch(addPerson(formState.name, formState.basePrice));\n            }\n            setFormState({\n                name: '',\n                basePrice: undefined,\n            });\n        }\n    };\n\n    return (\n        <AddForm title={title} Icon={PersonIcon} handleSubmit={handleSubmit}>\n            <TextField\n                label=\"Name\"\n                variant=\"outlined\"\n                margin=\"normal\"\n                name=\"name\"\n                value={formState.name}\n                fullWidth\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                onChange={handleNameChange}\n            />\n            <PriceInputField\n                label=\"Base Price\"\n                name=\"basePrice\"\n                value={formState.basePrice}\n                handleChange={(price: number | undefined): void => {\n                    setFormState(state => ({ ...state, basePrice: price }));\n                }}\n            />\n        </AddForm>\n    );\n};\n\nexport const AddName: React.FC = () => {\n    return <NameEdit title=\"Add a new person\" />;\n};\n","import { ADD_PERSON, ADD_EXPENSE, RESET_STATE, REMOVE_EXPENSE } from './types';\nimport { ExpenseKind } from '../expenseKind';\n\nexport interface ResetAction {\n    type: typeof RESET_STATE;\n}\n\nexport interface AddPersonAction {\n    type: typeof ADD_PERSON;\n    name: string;\n    basePrice: number;\n}\n\nexport interface AddExpenseAction {\n    type: typeof ADD_EXPENSE;\n    name: string;\n    kind: ExpenseKind;\n    payload: number;\n}\n\nexport interface RemoveExpenseAction {\n    type: typeof REMOVE_EXPENSE;\n    id: number;\n}\n\nexport type RootAction = ResetAction | AddPersonAction | AddExpenseAction | RemoveExpenseAction;\n\nexport const resetState = (): ResetAction => {\n    return {\n        type: RESET_STATE,\n    };\n};\n\nexport const addPerson = (name: string, basePrice: number): AddPersonAction => {\n    return {\n        type: ADD_PERSON,\n        name,\n        basePrice,\n    };\n};\n\nexport const addExpense = (name: string, kind: ExpenseKind, payload: number): AddExpenseAction => {\n    return {\n        type: ADD_EXPENSE,\n        name,\n        kind,\n        payload,\n    };\n};\n\nexport const removeExpense = (id: number): RemoveExpenseAction => {\n    return {\n        type: REMOVE_EXPENSE,\n        id,\n    };\n};\n","import React, { useState } from 'react';\nimport { TextField, makeStyles, FormControl, InputLabel, Select, MenuItem, Grid } from '@material-ui/core';\nimport MoneyIcon from '@material-ui/icons/Money';\nimport { AddForm } from './AddForm';\nimport { ExpenseKind } from '../expenseKind';\nimport { useDispatch } from 'react-redux';\nimport { addExpense } from '../state/actions';\nimport { PriceInputField } from './PriceInputField';\n\nconst useStyles = makeStyles(theme => ({\n    formRow: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    formRowItemLeft: {\n        [theme.breakpoints.up('sm')]: {\n            paddingRight: theme.spacing(1),\n        },\n    },\n    formRowItemRight: {\n        [theme.breakpoints.up('sm')]: {\n            paddingLeft: theme.spacing(1),\n        },\n    },\n}));\n\ninterface ExpenseFormState {\n    name: string;\n    kind: ExpenseKind;\n    payload?: number;\n}\n\nexport const AddExpense: React.FC = () => {\n    const classes = useStyles();\n\n    const [formState, setFormState] = useState<ExpenseFormState>({\n        name: '',\n        kind: ExpenseKind.SplitEqually,\n    });\n\n    const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        if (event.target) {\n            const value = event.target.value;\n            setFormState(state => ({ ...state, name: value }));\n        }\n    };\n\n    const handleSelectChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>): void => {\n        const value = event.target.value as ExpenseKind;\n        setFormState(state => ({ ...state, kind: value }));\n    };\n\n    const dispatch = useDispatch();\n\n    const handleSubmit = (): void => {\n        if (formState.name !== '' && formState.payload && formState.payload) {\n            dispatch(addExpense(formState.name, formState.kind, formState.payload));\n            setFormState({\n                name: '',\n                kind: ExpenseKind.SplitEqually,\n                payload: undefined,\n            });\n        }\n    };\n\n    return (\n        <AddForm title=\"Add a new expense\" Icon={MoneyIcon} handleSubmit={handleSubmit}>\n            <TextField\n                label=\"Name\"\n                name=\"name\"\n                variant=\"outlined\"\n                margin=\"normal\"\n                fullWidth\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                value={formState.name}\n                onChange={handleNameChange}\n            />\n            <Grid container>\n                <Grid item xs={12} sm={6} className={classes.formRowItemLeft}>\n                    <FormControl margin=\"normal\" fullWidth>\n                        <InputLabel id=\"kind-select-label\" variant=\"outlined\">\n                            Kind\n                        </InputLabel>\n                        <Select\n                            labelId=\"kind-select-label\"\n                            labelWidth={40}\n                            fullWidth\n                            value={formState.kind}\n                            variant=\"outlined\"\n                            onChange={handleSelectChange}\n                        >\n                            <MenuItem value={ExpenseKind.Percentage}>Percentage</MenuItem>\n                            <MenuItem value={ExpenseKind.SplitEqually}>Split equally</MenuItem>\n                            <MenuItem value={ExpenseKind.SplitProportionally}>Split proportionally</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={6} className={classes.formRowItemRight}>\n                    <PriceInputField\n                        label=\"Price\"\n                        name=\"price\"\n                        percentage={formState.kind === ExpenseKind.Percentage}\n                        value={formState.payload}\n                        handleChange={(price: number | undefined): void => {\n                            setFormState(state => ({ ...state, payload: price }));\n                        }}\n                    />\n                </Grid>\n            </Grid>\n        </AddForm>\n    );\n};\n","import React from 'react';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CachedIcon from '@material-ui/icons/Cached';\nimport { makeStyles, Drawer, IconButton, Divider, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { resetState } from '../state/actions';\n\nconst useStyles = makeStyles(theme => ({\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        padding: theme.spacing(0, 1),\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-end',\n    },\n}));\n\nconst reloadServiceWorker = (): void => {\n    navigator.serviceWorker.getRegistration().then(function(reg) {\n        if (reg) {\n            reg.unregister().then(function() {\n                window.location.reload(true);\n            });\n        } else {\n            window.location.reload(true);\n        }\n    });\n};\n\nexport const LeftMenu: React.FC<{ open: boolean; closeCallback(): void }> = ({ open, closeCallback }) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const handleReset = (): void => {\n        dispatch(resetState());\n        closeCallback();\n    };\n\n    return (\n        <Drawer open={open}>\n            <div className={classes.drawerHeader}>\n                <IconButton onClick={closeCallback}>\n                    <ChevronLeftIcon />\n                </IconButton>\n            </div>\n            <Divider />\n            <List>\n                <ListItem button onClick={handleReset}>\n                    <ListItemIcon>\n                        <DeleteIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Reset\" />\n                </ListItem>\n                <ListItem button onClick={reloadServiceWorker}>\n                    <ListItemIcon>\n                        <CachedIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Update and reload\" />\n                </ListItem>\n            </List>\n        </Drawer>\n    );\n};\n","import React from 'react';\nimport {\n    List,\n    ListItem,\n    ListItemText,\n    Paper,\n    makeStyles,\n    ListItemSecondaryAction,\n    IconButton,\n} from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Expense } from '../state/types';\nimport { ExpenseKind, expenseKindToString } from '../expenseKind';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { expensesSelector } from '../state/selectors';\nimport { removeExpense } from '../state/actions';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nconst formatExpensePayload = (kind: ExpenseKind, payload: number): string => {\n    if (kind === ExpenseKind.Percentage) {\n        return `${payload}%`;\n    } else {\n        const dollars = (Math.abs(payload) / 100).toFixed(2);\n        if (payload >= 0) {\n            return `$${dollars}`;\n        } else {\n            return `-$${dollars}`;\n        }\n    }\n};\n\nconst ExpenseHistoryItem: React.FC<{ expense: Expense }> = ({ expense }) => {\n    const primaryText = `${expense.name}: ${formatExpensePayload(expense.kind, expense.payload)}`;\n\n    const dispatch = useDispatch();\n\n    const handleClick = (): void => {\n        dispatch(removeExpense(expense.id));\n    };\n\n    return (\n        <ListItem>\n            <ListItemText primary={primaryText} secondary={expenseKindToString(expense.kind)} />\n            <ListItemSecondaryAction>\n                <IconButton edge=\"end\" onClick={handleClick}>\n                    <DeleteIcon />\n                </IconButton>\n            </ListItemSecondaryAction>\n        </ListItem>\n    );\n};\n\nexport const ExpenseHistory: React.FC = () => {\n    const classes = useStyles();\n    const expenses = useSelector(expensesSelector);\n\n    if (expenses.length === 0) {\n        return null;\n    }\n\n    return (\n        <Paper className={classes.root} elevation={3}>\n            <List>\n                {expenses.map(expense => {\n                    return <ExpenseHistoryItem expense={expense} key={expense.id} />;\n                })}\n            </List>\n        </Paper>\n    );\n};\n","import React, { useState } from 'react';\nimport {\n    Paper,\n    makeStyles,\n    Typography,\n    Button,\n    FormControl,\n    InputLabel,\n    OutlinedInput,\n    InputAdornment,\n} from '@material-ui/core';\nimport DialPadIcon from '@material-ui/icons/Dialpad';\nimport { evaluate } from '../maths/parser';\nimport { Alert } from '@material-ui/lab';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(2),\n        padding: theme.spacing(2),\n    },\n    headerIcon: {\n        marginRight: theme.spacing(1),\n    },\n    header: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    alert: {\n        marginTop: theme.spacing(1),\n    },\n    result: {\n        padding: theme.spacing(1),\n        backgroundColor: '#f5f5f5',\n    },\n}));\n\nexport const Calculator: React.FC = () => {\n    const classes = useStyles();\n    const [content, setContent] = useState('');\n    const [result, setResult] = useState<number | null>(null);\n    const [error, setError] = useState<string | null>(null);\n\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n        try {\n            const value = evaluate(content);\n            setResult(value);\n        } catch (err) {\n            setError(err.message || err.toString());\n        }\n    };\n\n    return (\n        <Paper className={classes.root} elevation={3}>\n            <div className={classes.header}>\n                <DialPadIcon fontSize=\"large\" className={classes.headerIcon} />\n                <Typography variant=\"h5\">Calculator</Typography>\n            </div>\n            {error && (\n                <Alert severity=\"error\" className={classes.alert}>\n                    {error}\n                </Alert>\n            )}\n            <form onSubmit={handleSubmit}>\n                <FormControl variant=\"outlined\" fullWidth margin=\"normal\">\n                    <InputLabel htmlFor=\"calculator-input\">Input</InputLabel>\n                    <OutlinedInput\n                        id=\"calculator-input\"\n                        value={content}\n                        onChange={(event): void => {\n                            setContent(event.target.value);\n                        }}\n                        endAdornment={\n                            <InputAdornment position=\"end\">\n                                <Button color=\"primary\" variant=\"contained\" size=\"large\" type=\"submit\">\n                                    =\n                                </Button>\n                            </InputAdornment>\n                        }\n                        labelWidth={40}\n                    />\n                </FormControl>\n            </form>\n            {result && (\n                <Paper elevation={2} className={classes.result}>\n                    <Typography variant=\"subtitle1\"> = {result.toFixed(2)}</Typography>\n                </Paper>\n            )}\n        </Paper>\n    );\n};\n","import React, { useState } from 'react';\nimport { AppBar, Toolbar, IconButton, Typography, Container, Grid, CssBaseline } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CheckTable } from './components/CheckTable';\nimport { AddName } from './components/AddName';\nimport { AddExpense } from './components/AddExpense';\nimport { LeftMenu } from './components/LeftMenu';\nimport { ExpenseHistory } from './components/ExpenseHistory';\nimport { Calculator } from './components/Calculator';\n\nconst useStyles = makeStyles(theme => ({\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    container: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n}));\n\nconst App: React.FC = () => {\n    const classes = useStyles();\n\n    const [isMenuOpened, setMenuOpened] = useState(false);\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        className={classes.menuButton}\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        onClick={(): void => setMenuOpened(true)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Check Splitter\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <LeftMenu open={isMenuOpened} closeCallback={(): void => setMenuOpened(false)} />\n            <Container fixed className={classes.container}>\n                <CheckTable />\n                <Grid container spacing={3}>\n                    <Grid item sm={12} md={4}>\n                        <AddName />\n                    </Grid>\n                    <Grid item sm={12} md={8}>\n                        <AddExpense />\n                    </Grid>\n                </Grid>\n                <Calculator />\n                <ExpenseHistory />\n            </Container>\n        </React.Fragment>\n    );\n};\n\nexport default App;\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","const bankersRounding = (num: number): number => {\n    const n = +num.toFixed(8); // Avoid rounding errors\n    const i = Math.floor(n),\n        f = n - i;\n    const e = 1e-8; // Allow for rounding errors in f\n    const r = f > 0.5 - e && f < 0.5 + e ? (i % 2 === 0 ? i : i + 1) : Math.round(n);\n    return r;\n};\n\nexport const convertToCents = (value: number): number => {\n    const cents = value * 100;\n    return bankersRounding(cents);\n};\n","import {\n    ADD_PERSON,\n    ADD_EXPENSE,\n    RESET_STATE,\n    PeopleState,\n    ExpensesState,\n    defaultExpensesState,\n    REMOVE_EXPENSE,\n} from './types';\nimport { RootAction } from './actions';\nimport { convertToCents } from './utils';\nimport { combineReducers } from 'redux';\nimport { ExpenseKind } from '../expenseKind';\n\nconst peopleReducer = (state: PeopleState = [], action: RootAction): PeopleState => {\n    switch (action.type) {\n        case ADD_PERSON:\n            const person = { name: action.name, basePrice: convertToCents(action.basePrice) };\n            return [...state, person];\n        case RESET_STATE:\n            return [];\n        default:\n            return state;\n    }\n};\n\nconst expensesReducer = (state: ExpensesState = defaultExpensesState, action: RootAction): ExpensesState => {\n    switch (action.type) {\n        case ADD_EXPENSE:\n            const payload = action.kind === ExpenseKind.Percentage ? action.payload : convertToCents(action.payload);\n            const expense = {\n                id: state.counter,\n                name: action.name,\n                kind: action.kind,\n                payload,\n            };\n            return {\n                counter: state.counter + 1,\n                expenses: [...state.expenses, expense],\n            };\n        case REMOVE_EXPENSE:\n            return {\n                counter: state.counter,\n                expenses: state.expenses.filter(expense => expense.id !== action.id),\n            };\n        case RESET_STATE:\n            return defaultExpensesState;\n        default:\n            return state;\n    }\n};\n\nexport const reducer = combineReducers({\n    people: peopleReducer,\n    expenses: expensesReducer,\n});\n\nexport type State = ReturnType<typeof reducer>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { reducer } from './state/reducers';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { storeState, loadState } from './model/localstorage';\n\nconst loadedState = loadState() || undefined;\n\nconst store = createStore(reducer, loadedState, composeWithDevTools());\n\nstore.subscribe(() => {\n    const state = store.getState();\n    storeState(state);\n});\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import { State } from '../state/reducers';\nimport { stateVersion } from '../state/types';\n\nconst LOCAL_STORAGE_KEY = 'check-splitter-state';\n\nexport const loadState = (key = LOCAL_STORAGE_KEY): State | null => {\n    try {\n        const item = window.localStorage.getItem(key);\n        if (!item) {\n            return null;\n        }\n\n        const payload = item ? JSON.parse(item) : null;\n        if ('version' in payload && payload.version === stateVersion) {\n            return payload.state;\n        } else {\n            return null;\n        }\n    } catch (error) {\n        console.error(error);\n        return null;\n    }\n};\n\nexport const storeState = (state: State, key = LOCAL_STORAGE_KEY): void => {\n    const payload = {\n        version: stateVersion,\n        state,\n    };\n    try {\n        window.localStorage.setItem(key, JSON.stringify(payload));\n    } catch (error) {\n        console.error(error);\n    }\n};\n"],"sourceRoot":""}