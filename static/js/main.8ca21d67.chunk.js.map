{"version":3,"sources":["expenseKind.ts","model/calculator.ts","maths/parser.ts","state/selectors.ts","components/CheckTable.tsx","components/AddButton.tsx","components/AddForm.tsx","state/types.ts","components/PriceInputField.tsx","components/AddName.tsx","state/actions.ts","components/AddExpense.tsx","components/LeftMenu.tsx","components/ExpenseHistory.tsx","components/Calculator.tsx","App.tsx","serviceWorker.ts","state/reducers.ts","index.tsx","model/localstorage.ts"],"names":["ExpenseKind","expenseKindToString","kind","Percentage","SplitEqually","SplitProportionally","TokenKind","PersonWithExpenses","person","expenses","total","this","basePrice","reduce","a","b","payload","peopleCount","totalBasePrice","push","getCurrentTotalPrice","percent","peopleSelector","state","people","expensesSelector","StyledTableCell","withStyles","theme","createStyles","head","backgroundColor","palette","secondary","main","color","common","white","TableCell","useStyles","makeStyles","root","width","marginBottom","spacing","table","maxHeight","CheckTable","classes","useSelector","peopleWithExpenses","length","map","personWithExpenses","expense","addExpense","finalize","computeExpenses","Paper","className","elevation","TableContainer","Table","stickyHeader","TableHead","TableRow","align","index","key","name","TableBody","toFixed","AddButton","Button","variant","size","type","startIcon","padding","headerIcon","marginRight","header","display","alignItems","AddForm","title","Icon","handleSubmit","children","fontSize","Typography","onSubmit","event","preventDefault","defaultExpensesState","counter","PriceInputField","label","percentage","value","handleChange","innerHandleChange","parseFloat","target","isNaN","undefined","TextField","margin","fullWidth","InputProps","endAdornment","InputAdornment","position","InputLabelProps","shrink","inputProps","min","max","onChange","startAdornment","NameEdit","editId","useState","formState","setFormState","dispatch","useDispatch","PersonIcon","console","log","price","AddName","formRow","justifyContent","formRowItemLeft","breakpoints","up","paddingRight","formRowItemRight","paddingLeft","AddExpense","MoneyIcon","Grid","container","item","xs","sm","FormControl","InputLabel","id","Select","labelId","labelWidth","MenuItem","drawerHeader","mixins","toolbar","LeftMenu","open","closeCallback","Drawer","IconButton","onClick","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","marginTop","ExpenseHistoryItem","payloadFormatted","primaryText","ListItemSecondaryAction","edge","ExpenseHistory","FLOAT_REGEX","Lexer","input","currentIndex","bufferToken","currentChar","trim","eatWhitespaces","c","Symbol","Operator","floatMatch","substring","match","floatString","Number","Error","token","innerNextToken","nextToken","BinOpExpression","lhs","rhs","op","LiteralExpression","literal","Parser","lexer","peekToken","parseAddExpression","expect","expression","parseExpression","expr","parseMulExpression","advance","parseAtom","parseParenthesisExpression","alert","result","Calculator","content","setContent","setResult","error","setError","Alert","severity","evaluate","err","message","toString","htmlFor","OutlinedInput","menuButton","flexGrow","App","isMenuOpened","setMenuOpened","Fragment","CssBaseline","AppBar","Toolbar","aria-label","Container","fixed","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","reducer","combineReducers","action","filter","loadedState","localStorage","getItem","JSON","parse","version","loadState","store","createStore","composeWithDevTools","subscribe","setItem","stringify","storeState","getState","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sKAAYA,E,sOAML,SAASC,EAAoBC,GAChC,OAAQA,GACJ,KAAKF,EAAYG,WACb,MAAO,aACX,KAAKH,EAAYI,aACb,MAAO,gBACX,KAAKJ,EAAYK,oBACb,MAAO,yB,SAbPL,O,2BAAAA,I,+BAAAA,I,8CAAAA,M,KCGL,ICHFM,EDGQC,EAAb,WAKI,WAAYC,GAAiB,yBAJ7BA,YAI4B,OAH5BC,cAG4B,OAF5BC,WAE4B,EACxBC,KAAKH,OAASA,EACdG,KAAKF,SAAW,GAChBE,KAAKD,MAAQ,EARrB,mEAYQ,OAAOC,KAAKH,OAAOI,UAAYD,KAAKF,SAASI,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,KAZ7E,iCAeeC,EAAiBd,EAAmBe,EAAqBC,GAChE,OAAQhB,GACJ,KAAKF,EAAYG,WACbQ,KAAKF,SAASU,KAAMH,EAAUL,KAAKS,uBAA0B,KAC7D,MACJ,KAAKpB,EAAYI,aACbO,KAAKF,SAASU,KAAKH,EAAUC,GAC7B,MACJ,KAAKjB,EAAYK,oBACb,IAAMgB,EAAUV,KAAKH,OAAOI,UAAYM,EACxCP,KAAKF,SAASU,KAAKE,EAAUL,MAzB7C,iCA+BQL,KAAKD,MAAQC,KAAKS,2BA/B1B,KEAaE,EAAiB,SAACC,GAC3B,OAAOA,EAAMC,QAGJC,EAAmB,SAACF,GAC7B,OAAOA,EAAMd,SAASA,UCepBiB,EAAkBC,aAAW,SAAAC,GAC/B,OAAOC,YAAa,CAChBC,KAAM,CACFC,gBAAiBH,EAAMI,QAAQC,UAAUC,KACzCC,MAAOP,EAAMI,QAAQI,OAAOC,WAJhBV,CAOrBW,KAEGC,EAAYC,aAAW,SAAAZ,GAAK,MAAK,CACnCa,KAAM,CACFC,MAAO,OACPC,aAAcf,EAAMgB,QAAQ,IAEhCC,MAAO,CACHC,UAAW,YAINC,EAAuB,WAChC,IAAMC,EAAUT,IAEVf,EAASyB,YAAY3B,GACrBb,EAAWwC,YAAYxB,GAEvByB,EHVqB,SAAC1B,EAAuBf,GACnD,IAAMQ,EAAcO,EAAO2B,OACrBjC,EAAiBM,EAAO4B,KAAI,SAAA5C,GAAM,OAAIA,EAAOI,aAAWC,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GACtF,OAAOS,EAAO4B,KAAI,SAAA5C,GACd,IAAM6C,EAAqB,IAAI9C,EAAmBC,GAD1B,uBAExB,YAAsBC,EAAtB,+CAAgC,CAAC,IAAtB6C,EAAqB,QAC5BD,EAAmBE,WAAWD,EAAQtC,QAASsC,EAAQpD,KAAMe,EAAaC,IAHtD,kFAMxB,OADAmC,EAAmBG,WACZH,KGCgBI,CAAgBjC,EAAQf,GAEnD,OACI,kBAACiD,EAAA,EAAD,CAAOC,UAAWX,EAAQP,KAAMmB,UAAW,GACvC,kBAACC,EAAA,EAAD,CAAgBF,UAAWX,EAAQH,OAC/B,kBAACiB,EAAA,EAAD,CAAOC,cAAY,GACf,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACvC,EAAD,CAAiBwC,MAAM,QAAvB,QACA,kBAACxC,EAAD,CAAiBwC,MAAM,SAAvB,cACCzD,EAAS2C,KAAI,SAACE,EAASa,GACpB,OACI,kBAACzC,EAAD,CAAiBwC,MAAM,QAAQE,IAAKD,GAC/Bb,EAAQe,SAIrB,kBAAC3C,EAAD,CAAiBwC,MAAM,SAAvB,WAGR,kBAACI,EAAA,EAAD,KACKpB,EAAmBE,KAAI,SAAC5C,EAAQ2D,GAC7B,OACI,kBAACF,EAAA,EAAD,CAAUG,IAAKD,GACX,kBAAC7B,EAAA,EAAD,CAAW4B,MAAM,QAAQ1D,EAAOA,OAAO6D,MACvC,kBAAC/B,EAAA,EAAD,CAAW4B,MAAM,SAAS1D,EAAOA,OAAOI,UAAU2D,QAAQ,IACzD/D,EAAOC,SAAS2C,KAAI,SAACE,EAASa,GAC3B,OACI,kBAAC7B,EAAA,EAAD,CAAW4B,MAAM,QAAQE,IAAKD,GACzBb,EAAQiB,QAAQ,OAI7B,kBAACjC,EAAA,EAAD,CAAW4B,MAAM,SAAS1D,EAAOE,MAAM6D,QAAQ,a,4DC7EtEC,EAAsB,WAC/B,OACI,kBAACC,EAAA,EAAD,CAAQtC,MAAM,UAAUuC,QAAQ,YAAYC,KAAK,QAAQC,KAAK,SAASC,UAAW,kBAAC,IAAD,OAAlF,QCFFtC,EAAYC,aAAW,SAAAZ,GAAK,MAAK,CACnCa,KAAM,CACFqC,QAASlD,EAAMgB,QAAQ,IAE3BmC,WAAY,CACRC,YAAapD,EAAMgB,QAAQ,IAE/BqC,OAAQ,CACJC,QAAS,OACTC,WAAY,cAUPC,EAAkC,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SACnExC,EAAUT,IAQhB,OACI,kBAACmB,EAAA,EAAD,CAAOE,UAAW,EAAGD,UAAWX,EAAQP,MACpC,yBAAKkB,UAAWX,EAAQiC,QACpB,kBAACK,EAAD,CAAMG,SAAS,QAAQ9B,UAAWX,EAAQ+B,aAC1C,kBAACW,EAAA,EAAD,CAAYhB,QAAQ,MAAMW,IAE9B,0BAAMM,SAbiB,SAACC,GAC5BA,EAAMC,iBACFN,GACAA,EAAaK,KAWRJ,EACD,kBAAC,EAAD,SCXHM,EAAsC,CAC/CC,QAAS,EACTtF,SAAU,I,SCpBDuF,EAA6C,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,MAAO5B,EAA4C,EAA5CA,KAAM6B,EAAsC,EAAtCA,WAAYC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aACnFC,EAAoB,SAACT,GACvB,IAAI5E,EAA8BsF,WAAWV,EAAMW,OAAOJ,OACtDK,MAAMxF,KACNA,OAAUyF,GAEdL,EAAapF,IAGjB,OAAIkF,EAEI,kBAACQ,EAAA,EAAD,CACIT,MAAOA,EACPvB,QAAQ,WACRiC,OAAO,SACPtC,KAAMA,EACNuC,WAAS,EACTC,WAAY,CACRC,aAAc,kBAACC,EAAA,EAAD,CAAgBC,SAAS,OAAzB,MAElBC,gBAAiB,CACbC,QAAQ,GAEZtC,KAAK,SACLuC,WAAY,CACRC,IAAK,EACLC,IAAK,KAETlB,MAAOA,GAAS,GAChBmB,SAAUjB,IAKd,kBAACK,EAAA,EAAD,CACIT,MAAOA,EACPvB,QAAQ,WACRiC,OAAO,SACPtC,KAAMA,EACN8B,MAAOA,GAAS,GAChBS,WAAS,EACTC,WAAY,CACRU,eAAgB,kBAACR,EAAA,EAAD,CAAgBC,SAAS,SAAzB,MAEpBpC,KAAK,SACL0C,SAAUjB,KCtCpBmB,EAAoC,SAAC,GAAuB,IAArBnC,EAAoB,EAApBA,MAAOoC,EAAa,EAAbA,OAAa,EAC3BC,mBAA0B,CAAErD,KAAM,KADP,mBACtDsD,EADsD,KAC3CC,EAD2C,KAQvDC,EAAWC,cAgBjB,OACI,kBAAC,EAAD,CAASzC,MAAOA,EAAOC,KAAMyC,IAAYxC,aAfxB,WCKA,IAAClB,EAAczD,EDJT,KAAnB+G,EAAUtD,MAAesD,EAAU/G,WAAa+G,EAAU/G,UAAY,IAClE6G,EACAO,QAAQC,IAAI,kBAAoBR,GAEhCI,GCAUxD,EDASsD,EAAUtD,KCALzD,EDAW+G,EAAU/G,UCClD,CACHgE,KHhCkB,aGiClBP,OACAzD,eDFIgH,EAAa,CACTvD,KAAM,GACNzD,eAAW6F,OAOf,kBAACC,EAAA,EAAD,CACIT,MAAM,OACNvB,QAAQ,WACRiC,OAAO,SACPtC,KAAK,OACL8B,MAAOwB,EAAUtD,KACjBuC,WAAS,EACTK,gBAAiB,CACbC,QAAQ,GAEZI,SAjCa,SAAC1B,GACtB,IAAMO,EAAQP,EAAMW,OAAOJ,MAC3ByB,GAAa,SAAArG,GAAK,sBAAUA,EAAV,CAAiB8C,KAAM8B,UAiCrC,kBAAC,EAAD,CACIF,MAAM,aACN5B,KAAK,YACL8B,MAAOwB,EAAU/G,UACjBwF,aAAc,SAAC8B,GACXN,GAAa,SAAArG,GAAK,sBAAUA,EAAV,CAAiBX,UAAWsH,YAOrDC,EAAoB,WAC7B,OAAO,kBAAC,EAAD,CAAU9C,MAAM,sB,qEE5DrB9C,GAAYC,aAAW,SAAAZ,GAAK,MAAK,CACnCwG,QAAS,CACLlD,QAAS,OACTmD,eAAgB,iBAEpBC,gBAAgB,gBACX1G,EAAM2G,YAAYC,GAAG,MAAQ,CAC1BC,aAAc7G,EAAMgB,QAAQ,KAGpC8F,iBAAiB,gBACZ9G,EAAM2G,YAAYC,GAAG,MAAQ,CAC1BG,YAAa/G,EAAMgB,QAAQ,SAW1BgG,GAAuB,WAChC,IAAM5F,EAAUT,KADsB,EAGJmF,mBAA2B,CACzDrD,KAAM,GACNnE,KAAMF,EAAYI,eALgB,mBAG/BuH,EAH+B,KAGpBC,EAHoB,KAoBhCC,EAAWC,cAajB,OACI,kBAAC,EAAD,CAASzC,MAAM,oBAAoBC,KAAMuD,KAAWtD,aAZnC,WDbC,IAAClB,EAAcnE,EAAmBc,ECc7B,KAAnB2G,EAAUtD,MAAesD,EAAU3G,SAAW2G,EAAU3G,QAAU,IAClE6G,GDfexD,ECeKsD,EAAUtD,KDfDnE,ECeOyH,EAAUzH,KDfEc,ECeI2G,EAAU3G,QDd/D,CACH4D,KHvCmB,cGwCnBP,OACAnE,OACAc,aCWI4G,EAAa,CACTvD,KAAM,GACNnE,KAAMF,EAAYI,aAClBY,aAASyF,OAOb,kBAACC,EAAA,EAAD,CACIT,MAAM,OACN5B,KAAK,OACLK,QAAQ,WACRiC,OAAO,SACPC,WAAS,EACTK,gBAAiB,CACbC,QAAQ,GAEZf,MAAOwB,EAAUtD,KACjBiD,SArCa,SAAC1B,GACtB,GAAIA,EAAMW,OAAQ,CACd,IAAMJ,EAAQP,EAAMW,OAAOJ,MAC3ByB,GAAa,SAAArG,GAAK,sBAAUA,EAAV,CAAiB8C,KAAM8B,WAoCzC,kBAAC2C,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGvF,UAAWX,EAAQsF,iBACzC,kBAACa,GAAA,EAAD,CAAaxC,OAAO,SAASC,WAAS,GAClC,kBAACwC,GAAA,EAAD,CAAYC,GAAG,oBAAoB3E,QAAQ,YAA3C,QAGA,kBAAC4E,GAAA,EAAD,CACIC,QAAQ,oBACRC,WAAY,GACZ5C,WAAS,EACTT,MAAOwB,EAAUzH,KACjBwE,QAAQ,WACR4C,SA5CG,SAAC1B,GACxB,IAAMO,EAAQP,EAAMW,OAAOJ,MAC3ByB,GAAa,SAAArG,GAAK,sBAAUA,EAAV,CAAiBrB,KAAMiG,SA4CrB,kBAACsD,GAAA,EAAD,CAAUtD,MAAOnG,EAAYG,YAA7B,cACA,kBAACsJ,GAAA,EAAD,CAAUtD,MAAOnG,EAAYI,cAA7B,iBACA,kBAACqJ,GAAA,EAAD,CAAUtD,MAAOnG,EAAYK,qBAA7B,2BAIZ,kBAACyI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGvF,UAAWX,EAAQ0F,kBACzC,kBAAC,EAAD,CACIzC,MAAM,QACN5B,KAAK,QACL6B,WAAYyB,EAAUzH,OAASF,EAAYG,WAC3CgG,MAAOwB,EAAU3G,QACjBoF,aAAc,SAAC8B,GACXN,GAAa,SAAArG,GAAK,sBAAUA,EAAV,CAAiBP,QAASkH,c,mGCnGlE3F,GAAYC,aAAW,SAAAZ,GAAK,MAAK,CACnC8H,aAAa,aACTxE,QAAS,OACTC,WAAY,SACZL,QAASlD,EAAMgB,QAAQ,EAAG,IACvBhB,EAAM+H,OAAOC,QAJR,CAKRvB,eAAgB,iBAIXwB,GAA+D,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,cAC3E/G,EAAUT,KACVsF,EAAWC,cAOjB,OACI,kBAACkC,GAAA,EAAD,CAAQF,KAAMA,GACV,yBAAKnG,UAAWX,EAAQ0G,cACpB,kBAACO,EAAA,EAAD,CAAYC,QAASH,GACjB,kBAAC,KAAD,QAGR,kBAACI,GAAA,EAAD,MACA,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAUC,QAAM,EAACJ,QAdT,WAChBrC,EFMG,CACHjD,KH3BmB,gBKqBnBmF,MAaY,kBAACQ,GAAA,EAAD,KACI,kBAAC,KAAD,OAEJ,kBAACC,GAAA,EAAD,CAAcC,QAAQ,c,UCtBpClI,GAAYC,aAAW,SAAAZ,GAAK,MAAK,CACnCa,KAAM,CACFiI,UAAW9I,EAAMgB,QAAQ,QAI3B+H,GAAqD,SAAC,GAAiB,IAAfrH,EAAc,EAAdA,QACpDsH,EAAmBtH,EAAQpD,OAASF,EAAYG,WAA7B,UAA6CmD,EAAQtC,QAArD,gBAAsEsC,EAAQtC,SACjG6J,EAAW,UAAMvH,EAAQe,KAAd,cAAwBuG,GAEnC/C,EAAWC,cAMjB,OACI,kBAACuC,GAAA,EAAD,KACI,kBAACG,GAAA,EAAD,CAAcC,QAASI,EAAa5I,UAAWhC,EAAoBqD,EAAQpD,QAC3E,kBAAC4K,GAAA,EAAD,KACI,kBAACb,EAAA,EAAD,CAAYc,KAAK,MAAMb,QARf,WAChBrC,EHqBG,CACHjD,KH/CsB,iBGgDtByE,GGvBuB/F,EAAQ+F,OAQnB,kBAAC,KAAD,UAOP2B,GAA2B,WACpC,IAAMhI,EAAUT,KACV9B,EAAWwC,YAAYxB,GAE7B,OAAwB,IAApBhB,EAAS0C,OACF,KAIP,kBAACO,EAAA,EAAD,CAAOC,UAAWX,EAAQP,KAAMmB,UAAW,GACvC,kBAACwG,GAAA,EAAD,KACK3J,EAAS2C,KAAI,SAAAE,GACV,OAAO,kBAAC,GAAD,CAAoBA,QAASA,EAASc,IAAKd,EAAQ+F,W,wCXzDzE/I,O,mBAAAA,I,mBAAAA,I,wBAAAA,M,KAyBL,IAAM2K,GAAc,eAEdC,G,WAKF,WAAYC,GAAgB,yBAJ5BA,WAI2B,OAH3BC,kBAG2B,OAF3BC,iBAE2B,EACvB1K,KAAKwK,MAAQA,EACbxK,KAAKyK,aAAe,E,0DAIpB,OAAOzK,KAAKwK,MAAMxK,KAAKyK,gB,uCAKvB,KAAOzK,KAAKyK,aAAezK,KAAKwK,MAAMhI,QAA+C,IAArCxC,KAAK2K,cAAcC,OAAOpI,QACtExC,KAAKyK,cAAgB,I,uCAOzB,GADAzK,KAAK6K,iBACD7K,KAAKyK,cAAgBzK,KAAKwK,MAAMhI,OAChC,OAAO,KAGX,IAAMsI,EAAI9K,KAAK2K,cACf,GAAU,MAANG,GAAmB,MAANA,EAEb,OADA9K,KAAKyK,cAAgB,EACd,CAAExG,KAAMtE,EAAUoL,OAAQvF,MAAOsF,GACrC,GAAU,MAANA,GAAmB,MAANA,GAAmB,MAANA,GAAmB,MAANA,EAE9C,OADA9K,KAAKyK,cAAgB,EACd,CAAExG,KAAMtE,EAAUqL,SAAUxF,MAAOsF,GAE1C,IAAMG,EAAajL,KAAKwK,MAAMU,UAAUlL,KAAKyK,cAAcU,MAAMb,IACjE,GAAIW,EAAY,CACZ,IAAMG,EAAcH,EAAW,GAC/BjL,KAAKyK,cAAgBW,EAAY5I,OACjC,IAAMgD,EAAQG,WAAWyF,GACzB,MAAO,CAAEnH,KAAMtE,EAAU0L,OAAQ7F,SAIzC,MAAM,IAAI8F,MAAJ,8CAAiDR,EAAjD,Q,kCAIN,GAAI9K,KAAK0K,YAAa,CAClB,IAAMa,EAAQvL,KAAK0K,YAEnB,OADA1K,KAAK0K,iBAAc5E,EACZyF,EAGX,OAAOvL,KAAKwL,mB,kCAIZ,GAAIxL,KAAK0K,YACL,OAAO1K,KAAK0K,YAGhB,IAAMa,EAAQvL,KAAKwL,iBAInB,OAHID,IACAvL,KAAK0K,YAAca,GAEhBA,I,gCAKPvL,KAAKyL,gB,KAQPC,G,WAKF,WAAYC,EAAiBC,EAAiBC,GAAmB,yBAJjEF,SAIgE,OAHhEC,SAGgE,OAFhEC,QAEgE,EAC5D7L,KAAK2L,IAAMA,EACX3L,KAAK4L,IAAMA,EACX5L,KAAK6L,GAAKA,E,oDAIV,OAAQ7L,KAAK6L,IACT,IAAK,IACD,OAAO7L,KAAK2L,IAAInG,QAAUxF,KAAK4L,IAAIpG,QACvC,IAAK,IACD,OAAOxF,KAAK2L,IAAInG,QAAUxF,KAAK4L,IAAIpG,QACvC,IAAK,IACD,OAAOxF,KAAK2L,IAAInG,QAAUxF,KAAK4L,IAAIpG,QACvC,IAAK,IACD,OAAOxF,KAAK2L,IAAInG,QAAUxF,KAAK4L,IAAIpG,a,KAK7CsG,G,WAGF,WAAYC,GAAkB,yBAF9BA,aAE6B,EACzB/L,KAAK+L,QAAUA,E,oDAIf,OAAO/L,KAAK+L,Y,KAIdC,G,WAGF,WAAYC,GAAe,yBAF3BA,WAE0B,EACtBjM,KAAKiM,MAAQA,E,mDAGVhI,EAAiBuB,GACpB,IAAM+F,EAAQvL,KAAKiM,MAAMR,YACzB,IAAIF,GAASA,EAAMtH,OAASA,GAAQsH,EAAM/F,QAAUA,EAGpD,MAAM,IAAI8F,MAAM,sB,wCAKhB,OADctL,KAAKiM,MAAMC,YAKlBlM,KAAKmM,qBAHD,O,mDAOXnM,KAAKoM,OAAOzM,EAAUoL,OAAQ,KAC9B,IAAMsB,EAAarM,KAAKsM,kBACxB,IAAKD,EACD,MAAM,IAAIf,MAAM,kBAGpB,OADAtL,KAAKoM,OAAOzM,EAAUoL,OAAQ,KACvBsB,I,2CAKP,IADA,IAAIE,EAAOvM,KAAKwM,uBACH,CACT,IAAMjB,EAAQvL,KAAKiM,MAAMC,YACzB,IAAIX,GAASA,EAAMtH,OAAStE,EAAUqL,UAA6B,MAAhBO,EAAM/F,OAAiC,MAAhB+F,EAAM/F,MAK5E,MAJAxF,KAAKiM,MAAMQ,UACX,IAAMb,EAAM5L,KAAKwM,qBACjBD,EAAO,IAAIb,GAAgBa,EAAMX,EAAKL,EAAM/F,OAKpD,OAAO+G,I,2CAIP,IADA,IAAIA,EAAOvM,KAAK0M,cACH,CACT,IAAMnB,EAAQvL,KAAKiM,MAAMC,YACzB,IAAIX,GAASA,EAAMtH,OAAStE,EAAUqL,UAA6B,MAAhBO,EAAM/F,OAAiC,MAAhB+F,EAAM/F,MAK5E,MAJAxF,KAAKiM,MAAMQ,UACX,IAAMb,EAAM5L,KAAK0M,YACjBH,EAAO,IAAIb,GAAgBa,EAAMX,EAAKL,EAAM/F,OAKpD,OAAO+G,I,kCAIP,IAAMhB,EAAQvL,KAAKiM,MAAMC,YACzB,IAAKX,EACD,MAAM,IAAID,MAAM,iBAGpB,GAAIC,EAAMtH,OAAStE,EAAU0L,OAEzB,OADArL,KAAKiM,MAAMQ,UACJ,IAAIX,GAAkBP,EAAM/F,OAChC,GAAI+F,EAAMtH,OAAStE,EAAUoL,QAA0B,MAAhBQ,EAAM/F,MAChD,OAAOxF,KAAK2M,6BAEZ,MAAM,IAAIrB,MAAM,wB,eY5MtB1J,GAAYC,aAAW,SAAAZ,GAAK,MAAK,CACnCa,KAAM,CACFiI,UAAW9I,EAAMgB,QAAQ,GACzBkC,QAASlD,EAAMgB,QAAQ,IAE3BmC,WAAY,CACRC,YAAapD,EAAMgB,QAAQ,IAE/BqC,OAAQ,CACJC,QAAS,OACTC,WAAY,UAEhBoI,MAAO,CACH7C,UAAW9I,EAAMgB,QAAQ,IAE7B4K,OAAQ,CACJ1I,QAASlD,EAAMgB,QAAQ,GACvBb,gBAAiB,eAIZ0L,GAAuB,WAChC,IAAMzK,EAAUT,KADsB,EAERmF,mBAAS,IAFD,mBAE/BgG,EAF+B,KAEtBC,EAFsB,OAGVjG,mBAAwB,MAHd,mBAG/B8F,EAH+B,KAGvBI,EAHuB,OAIZlG,mBAAwB,MAJZ,mBAI/BmG,EAJ+B,KAIxBC,EAJwB,KAgBtC,OACI,kBAACpK,EAAA,EAAD,CAAOC,UAAWX,EAAQP,KAAMmB,UAAW,GACvC,yBAAKD,UAAWX,EAAQiC,QACpB,kBAAC,KAAD,CAAaQ,SAAS,QAAQ9B,UAAWX,EAAQ+B,aACjD,kBAACW,EAAA,EAAD,CAAYhB,QAAQ,MAApB,eAEHmJ,GACG,kBAACE,GAAA,EAAD,CAAOC,SAAS,QAAQrK,UAAWX,EAAQuK,OACtCM,GAGT,0BAAMlI,SArBO,SAACC,GAClBA,EAAMC,iBACN,IACI,IAAMM,EZmLM,SAACgF,GACrB,IAAMyB,EAAQ,IAAI1B,GAAMC,GAElB6B,EADS,IAAIL,GAAOC,GACAK,kBAC1B,OAAID,EACOA,EAAW7G,QAEX,KY1LW8H,CAASP,GACvBE,EAAUzH,GACZ,MAAO+H,GACLJ,EAASI,EAAIC,SAAWD,EAAIE,eAgBxB,kBAACjF,GAAA,EAAD,CAAazE,QAAQ,WAAWkC,WAAS,EAACD,OAAO,UAC7C,kBAACyC,GAAA,EAAD,CAAYiF,QAAQ,oBAApB,SACA,kBAACC,GAAA,EAAD,CACIjF,GAAG,mBACHlD,MAAOuH,EACPpG,SAAU,SAAC1B,GACP+H,EAAW/H,EAAMW,OAAOJ,QAE5BW,aACI,kBAACC,EAAA,EAAD,CAAgBC,SAAS,OACrB,kBAACvC,EAAA,EAAD,CAAQtC,MAAM,UAAUuC,QAAQ,YAAYC,KAAK,QAAQC,KAAK,UAA9D,MAKR4E,WAAY,OAIvBgE,GACG,kBAAC9J,EAAA,EAAD,CAAOE,UAAW,EAAGD,UAAWX,EAAQwK,QACpC,kBAAC9H,EAAA,EAAD,CAAYhB,QAAQ,aAApB,MAAoC8I,MC1ElDjL,GAAYC,aAAW,SAAAZ,GAAK,MAAK,CACnC2M,WAAY,CACRvJ,YAAapD,EAAMgB,QAAQ,IAE/ByC,MAAO,CACHmJ,SAAU,GAEdzF,UAAW,CACP2B,UAAW9I,EAAMgB,QAAQ,GACzBD,aAAcf,EAAMgB,QAAQ,QA8CrB6L,GA1CO,WAClB,IAAMzL,EAAUT,KADQ,EAGcmF,oBAAS,GAHvB,mBAGjBgH,EAHiB,KAGHC,EAHG,KAKxB,OACI,kBAAC,IAAMC,SAAP,KACI,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQ9H,SAAS,UACb,kBAAC+H,EAAA,EAAD,KACI,kBAAC9E,EAAA,EAAD,CACIc,KAAK,QACLpH,UAAWX,EAAQuL,WACnBpM,MAAM,UACN6M,aAAW,OACX9E,QAAS,kBAAYyE,GAAc,KAEnC,kBAAC,IAAD,OAEJ,kBAACjJ,EAAA,EAAD,CAAYhB,QAAQ,KAAKf,UAAWX,EAAQqC,OAA5C,oBAKR,kBAAC,GAAD,CAAUyE,KAAM4E,EAAc3E,cAAe,kBAAY4E,GAAc,MACvE,kBAACM,EAAA,EAAD,CAAWC,OAAK,EAACvL,UAAWX,EAAQ+F,WAChC,kBAAC,EAAD,MACA,kBAACD,EAAA,EAAD,CAAMC,WAAS,EAACnG,QAAS,GACrB,kBAACkG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAAC,EAAD,OAEJ,kBAACJ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAAC,GAAD,QAGR,kBAAC,GAAD,MACA,kBAAC,GAAD,SC7CViG,GAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzD,MAAM,2DA0CvC,SAAS0D,GAAgBC,EAAeC,GACpCC,UAAUC,cACLC,SAASJ,GACTK,MAAK,SAAAC,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiB1O,QACboO,UAAUC,cAAcQ,YAIxBpI,QAAQC,IACJ,iHAKAyH,GAAUA,EAAOW,UACjBX,EAAOW,SAASN,KAMpB/H,QAAQC,IAAI,sCAGRyH,GAAUA,EAAOY,WACjBZ,EAAOY,UAAUP,WAOxCQ,OAAM,SAAA1C,GACH7F,QAAQ6F,MAAM,4CAA6CA,M,sBC1D1D2C,GAAUC,2BAAgB,CACnCjP,OAjCkB,WAA+D,IAA9DD,EAA6D,uDAAxC,GAAImP,EAAoC,uCAChF,OAAQA,EAAO9L,MACX,IVXkB,aUYd,IAAMpE,EAAS,CAAE6D,KAAMqM,EAAOrM,KAAMzD,UAAW8P,EAAO9P,WACtD,MAAM,GAAN,oBAAWW,GAAX,CAAkBf,IACtB,IVfmB,cUgBf,MAAO,GACX,QACI,OAAOe,IA0Bfd,SAtBoB,WAAqF,IAApFc,EAAmF,uDAA5DuE,EAAsB4K,EAAsC,uCACxG,OAAQA,EAAO9L,MACX,IVtBmB,cUuBf,IAAMtB,EAAU,CAAE+F,GAAI9H,EAAMwE,QAAS1B,KAAMqM,EAAOrM,KAAMnE,KAAMwQ,EAAOxQ,KAAMc,QAAS0P,EAAO1P,SAC3F,MAAO,CACH+E,QAASxE,EAAMwE,QAAU,EACzBtF,SAAS,GAAD,oBAAMc,EAAMd,UAAZ,CAAsB6C,KAEtC,IV3BsB,iBU4BlB,MAAO,CACHyC,QAASxE,EAAMwE,QACftF,SAAUc,EAAMd,SAASkQ,QAAO,SAAArN,GAAO,OAAIA,EAAQ+F,KAAOqH,EAAOrH,OAEzE,IVnCmB,cUoCf,OAAOvD,EACX,QACI,OAAOvE,M,SC9BbqP,GCLmB,WAA4C,IAA3CxM,EAA0C,uDAF1C,uBAGtB,IACI,IAAM4E,EAAOqG,OAAOwB,aAAaC,QAAQ1M,GACzC,IAAK4E,EACD,OAAO,KAGX,IAAMhI,EAAUgI,EAAO+H,KAAKC,MAAMhI,GAAQ,KAC1C,MAAI,YAAahI,GZLG,IYKQA,EAAQiQ,QACzBjQ,EAAQO,MAER,KAEb,MAAOsM,GAEL,OADA7F,QAAQ6F,MAAMA,GACP,MDVKqD,SAAezK,EAE7B0K,GAAQC,uBAAYZ,GAASI,GAAaS,kCAEhDF,GAAMG,WAAU,YCUU,SAAC/P,GAAiD,IAAnC6C,EAAkC,uDArBjD,uBAsBhBpD,EAAU,CACZiQ,QZlBoB,EYmBpB1P,SAEJ,IACI8N,OAAOwB,aAAaU,QAAQnN,EAAK2M,KAAKS,UAAUxQ,IAClD,MAAO6M,GACL7F,QAAQ6F,MAAMA,IDhBlB4D,CADcN,GAAMO,eAIxBC,IAASC,OACL,kBAAC,IAAD,CAAUT,MAAOA,IACb,kBAAC,GAAD,OAEJU,SAASC,eAAe,SFKrB,SAAkBpC,GACrB,GAA6C,kBAAmBC,UAAW,CAGvE,GADkB,IAAIoC,IAAIC,kBAAwB3C,OAAOC,SAAS2C,MACpDC,SAAW7C,OAAOC,SAAS4C,OAIrC,OAGJ7C,OAAO8C,iBAAiB,QAAQ,WAC5B,IAAM1C,EAAK,UAAMuC,kBAAN,sBAEP7C,KAgEhB,SAAiCM,EAAeC,GAE5C0C,MAAM3C,EAAO,CACT4C,QAAS,CAAE,iBAAkB,YAE5BvC,MAAK,SAAAwC,GAEF,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBACjB,MAApBF,EAASG,QAAkC,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAEvE/C,UAAUC,cAAc+C,MAAM7C,MAAK,SAAAC,GAC/BA,EAAa6C,aAAa9C,MAAK,WAC3BT,OAAOC,SAASuD,eAKxBrD,GAAgBC,EAAOC,MAG9Ba,OAAM,WACHvI,QAAQC,IAAI,oEAnFR6K,CAAwBrD,EAAOC,GAI/BC,UAAUC,cAAc+C,MAAM7C,MAAK,WAC/B9H,QAAQC,IACJ,iHAMRuH,GAAgBC,EAAOC,OE3BvCE,K","file":"static/js/main.8ca21d67.chunk.js","sourcesContent":["export enum ExpenseKind {\n    Percentage,\n    SplitEqually,\n    SplitProportionally,\n}\n\nexport function expenseKindToString(kind: ExpenseKind): string {\n    switch (kind) {\n        case ExpenseKind.Percentage:\n            return 'Percentage';\n        case ExpenseKind.SplitEqually:\n            return 'Split Equally';\n        case ExpenseKind.SplitProportionally:\n            return 'Split Proportionally';\n    }\n}\n","import { Person, Expense } from '../state/types';\nimport { ExpenseKind } from '../expenseKind';\n\nexport class PersonWithExpenses {\n    person: Person;\n    expenses: Array<number>;\n    total: number;\n\n    constructor(person: Person) {\n        this.person = person;\n        this.expenses = [];\n        this.total = 0.0;\n    }\n\n    getCurrentTotalPrice(): number {\n        return this.person.basePrice + this.expenses.reduce((a, b) => a + b, 0);\n    }\n\n    addExpense(payload: number, kind: ExpenseKind, peopleCount: number, totalBasePrice: number): void {\n        switch (kind) {\n            case ExpenseKind.Percentage:\n                this.expenses.push((payload * this.getCurrentTotalPrice()) / 100);\n                break;\n            case ExpenseKind.SplitEqually:\n                this.expenses.push(payload / peopleCount);\n                break;\n            case ExpenseKind.SplitProportionally:\n                const percent = this.person.basePrice / totalBasePrice;\n                this.expenses.push(percent * payload);\n                break;\n        }\n    }\n\n    finalize(): void {\n        this.total = this.getCurrentTotalPrice();\n    }\n}\n\nexport const computeExpenses = (people: Array<Person>, expenses: Array<Expense>): Array<PersonWithExpenses> => {\n    const peopleCount = people.length;\n    const totalBasePrice = people.map(person => person.basePrice).reduce((a, b) => a + b, 0);\n    return people.map(person => {\n        const personWithExpenses = new PersonWithExpenses(person);\n        for (const expense of expenses) {\n            personWithExpenses.addExpense(expense.payload, expense.kind, peopleCount, totalBasePrice);\n        }\n        personWithExpenses.finalize();\n        return personWithExpenses;\n    });\n};\n","enum TokenKind {\n    Number,\n    Symbol,\n    Operator,\n}\n\ninterface NumberToken {\n    type: TokenKind.Number;\n    value: number;\n}\n\ninterface SymbolToken {\n    type: TokenKind.Symbol;\n    value: '(' | ')';\n}\n\ntype OperatorKind = '+' | '-' | '*' | '/';\n\ninterface OperatorToken {\n    type: TokenKind.Operator;\n    value: OperatorKind;\n}\n\ntype Token = NumberToken | SymbolToken | OperatorToken;\n\nconst FLOAT_REGEX = /^\\d+(\\.\\d+)?/;\n\nclass Lexer {\n    input: string;\n    currentIndex: number;\n    bufferToken?: Token;\n\n    constructor(input: string) {\n        this.input = input;\n        this.currentIndex = 0;\n    }\n\n    currentChar(): string {\n        return this.input[this.currentIndex];\n    }\n\n    eatWhitespaces(): void {\n        // we loop while the current char is a whitespace\n        while (this.currentIndex < this.input.length && this.currentChar().trim().length === 0) {\n            this.currentIndex += 1;\n        }\n        return;\n    }\n\n    innerNextToken(): Token | null {\n        this.eatWhitespaces();\n        if (this.currentIndex >= this.input.length) {\n            return null;\n        }\n\n        const c = this.currentChar();\n        if (c === '(' || c === ')') {\n            this.currentIndex += 1;\n            return { type: TokenKind.Symbol, value: c };\n        } else if (c === '+' || c === '-' || c === '*' || c === '/') {\n            this.currentIndex += 1;\n            return { type: TokenKind.Operator, value: c };\n        } else {\n            const floatMatch = this.input.substring(this.currentIndex).match(FLOAT_REGEX);\n            if (floatMatch) {\n                const floatString = floatMatch[0];\n                this.currentIndex += floatString.length;\n                const value = parseFloat(floatString);\n                return { type: TokenKind.Number, value };\n            }\n        }\n\n        throw new Error(`Unknown character in input string: '${c}'`);\n    }\n\n    nextToken(): Token | null {\n        if (this.bufferToken) {\n            const token = this.bufferToken;\n            this.bufferToken = undefined;\n            return token;\n        }\n\n        return this.innerNextToken();\n    }\n\n    peekToken(): Token | null {\n        if (this.bufferToken) {\n            return this.bufferToken;\n        }\n\n        const token = this.innerNextToken();\n        if (token) {\n            this.bufferToken = token;\n        }\n        return token;\n    }\n\n    advance(): void {\n        // we ignore the next token\n        this.nextToken();\n    }\n}\n\ninterface Expression {\n    value(): number;\n}\n\nclass BinOpExpression implements Expression {\n    lhs: Expression;\n    rhs: Expression;\n    op: OperatorKind;\n\n    constructor(lhs: Expression, rhs: Expression, op: OperatorKind) {\n        this.lhs = lhs;\n        this.rhs = rhs;\n        this.op = op;\n    }\n\n    value(): number {\n        switch (this.op) {\n            case '*':\n                return this.lhs.value() * this.rhs.value();\n            case '+':\n                return this.lhs.value() + this.rhs.value();\n            case '-':\n                return this.lhs.value() - this.rhs.value();\n            case '/':\n                return this.lhs.value() / this.rhs.value();\n        }\n    }\n}\n\nclass LiteralExpression implements Expression {\n    literal: number;\n\n    constructor(literal: number) {\n        this.literal = literal;\n    }\n\n    value(): number {\n        return this.literal;\n    }\n}\n\nclass Parser {\n    lexer: Lexer;\n\n    constructor(lexer: Lexer) {\n        this.lexer = lexer;\n    }\n\n    expect(type: TokenKind, value?: any): void {\n        const token = this.lexer.nextToken();\n        if (token && token.type === type && token.value === value) {\n            return;\n        }\n        throw new Error('Unexpected token');\n    }\n\n    parseExpression(): Expression | null {\n        const token = this.lexer.peekToken();\n        if (!token) {\n            return null;\n        }\n\n        return this.parseAddExpression();\n    }\n\n    parseParenthesisExpression(): Expression {\n        this.expect(TokenKind.Symbol, '(');\n        const expression = this.parseExpression();\n        if (!expression) {\n            throw new Error('Unexpected EOL');\n        }\n        this.expect(TokenKind.Symbol, ')');\n        return expression;\n    }\n\n    parseAddExpression(): Expression {\n        let expr = this.parseMulExpression();\n        while (true) {\n            const token = this.lexer.peekToken();\n            if (token && token.type === TokenKind.Operator && (token.value === '+' || token.value === '-')) {\n                this.lexer.advance();\n                const rhs = this.parseMulExpression();\n                expr = new BinOpExpression(expr, rhs, token.value);\n            } else {\n                break;\n            }\n        }\n        return expr;\n    }\n    parseMulExpression(): Expression {\n        let expr = this.parseAtom();\n        while (true) {\n            const token = this.lexer.peekToken();\n            if (token && token.type === TokenKind.Operator && (token.value === '*' || token.value === '/')) {\n                this.lexer.advance();\n                const rhs = this.parseAtom();\n                expr = new BinOpExpression(expr, rhs, token.value);\n            } else {\n                break;\n            }\n        }\n        return expr;\n    }\n\n    parseAtom(): Expression {\n        const token = this.lexer.peekToken();\n        if (!token) {\n            throw new Error('Expected atom');\n        }\n\n        if (token.type === TokenKind.Number) {\n            this.lexer.advance();\n            return new LiteralExpression(token.value);\n        } else if (token.type === TokenKind.Symbol && token.value === '(') {\n            return this.parseParenthesisExpression();\n        } else {\n            throw new Error('Unexpected token');\n        }\n    }\n}\n\nexport const evaluate = (input: string): number | null => {\n    const lexer = new Lexer(input);\n    const parser = new Parser(lexer);\n    const expression = parser.parseExpression();\n    if (expression) {\n        return expression.value();\n    } else {\n        return null;\n    }\n};\n","import { State } from './reducers';\nimport { Person, Expense } from './types';\n\nexport const peopleSelector = (state: State): Array<Person> => {\n    return state.people;\n};\n\nexport const expensesSelector = (state: State): Array<Expense> => {\n    return state.expenses.expenses;\n};\n","import React from 'react';\nimport {\n    Paper,\n    Table,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    makeStyles,\n    withStyles,\n    createStyles,\n} from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { computeExpenses } from '../model/calculator';\nimport { peopleSelector, expensesSelector } from '../state/selectors';\n\ninterface Row {\n    name: string;\n    basePrice: number;\n    tip: number;\n}\n\nconst StyledTableCell = withStyles(theme => {\n    return createStyles({\n        head: {\n            backgroundColor: theme.palette.secondary.main,\n            color: theme.palette.common.white,\n        },\n    });\n})(TableCell);\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        maxHeight: '50vh',\n    },\n}));\n\nexport const CheckTable: React.FC = () => {\n    const classes = useStyles();\n\n    const people = useSelector(peopleSelector);\n    const expenses = useSelector(expensesSelector);\n\n    const peopleWithExpenses = computeExpenses(people, expenses);\n\n    return (\n        <Paper className={classes.root} elevation={3}>\n            <TableContainer className={classes.table}>\n                <Table stickyHeader>\n                    <TableHead>\n                        <TableRow>\n                            <StyledTableCell align=\"left\">Name</StyledTableCell>\n                            <StyledTableCell align=\"right\">Base Price</StyledTableCell>\n                            {expenses.map((expense, index) => {\n                                return (\n                                    <StyledTableCell align=\"right\" key={index}>\n                                        {expense.name}\n                                    </StyledTableCell>\n                                );\n                            })}\n                            <StyledTableCell align=\"right\">Total</StyledTableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {peopleWithExpenses.map((person, index) => {\n                            return (\n                                <TableRow key={index}>\n                                    <TableCell align=\"left\">{person.person.name}</TableCell>\n                                    <TableCell align=\"right\">{person.person.basePrice.toFixed(2)}</TableCell>\n                                    {person.expenses.map((expense, index) => {\n                                        return (\n                                            <TableCell align=\"right\" key={index}>\n                                                {expense.toFixed(2)}\n                                            </TableCell>\n                                        );\n                                    })}\n                                    <TableCell align=\"right\">{person.total.toFixed(2)}</TableCell>\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </Paper>\n    );\n};\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\n\nexport const AddButton: React.FC = () => {\n    return (\n        <Button color=\"primary\" variant=\"contained\" size=\"large\" type=\"submit\" startIcon={<AddIcon />}>\n            Add\n        </Button>\n    );\n};\n","import React from 'react';\nimport { makeStyles, Paper, Typography, SvgIconProps } from '@material-ui/core';\nimport { AddButton } from './AddButton';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n    headerIcon: {\n        marginRight: theme.spacing(1),\n    },\n    header: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\ninterface AddFormProps {\n    title: string;\n    Icon(props: SvgIconProps): JSX.Element;\n    handleSubmit?(event: React.FormEvent<HTMLFormElement>): void;\n}\n\nexport const AddForm: React.FC<AddFormProps> = ({ title, Icon, handleSubmit, children }) => {\n    const classes = useStyles();\n    const preventAndHandleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n        if (handleSubmit) {\n            handleSubmit(event);\n        }\n    };\n\n    return (\n        <Paper elevation={3} className={classes.root}>\n            <div className={classes.header}>\n                <Icon fontSize=\"large\" className={classes.headerIcon} />\n                <Typography variant=\"h5\">{title}</Typography>\n            </div>\n            <form onSubmit={preventAndHandleSubmit}>\n                {children}\n                <AddButton />\n            </form>\n        </Paper>\n    );\n};\n","import { ExpenseKind } from '../expenseKind';\n\nexport const RESET_STATE = 'RESET_STATE';\nexport const ADD_PERSON = 'ADD_PERSON';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const REMOVE_EXPENSE = 'REMOVE_EXPENSE';\n\n// Last changed when adding ids to expenses\nexport const stateVersion = 1;\n\nexport interface Person {\n    name: string;\n    basePrice: number;\n}\n\nexport interface Expense {\n    id: number;\n    name: string;\n    payload: number;\n    kind: ExpenseKind;\n}\n\nexport type PeopleState = Array<Person>;\n\nexport interface ExpensesState {\n    counter: number;\n    expenses: Array<Expense>;\n}\n\nexport const defaultExpensesState: ExpensesState = {\n    counter: 0,\n    expenses: [],\n};\n","import React from 'react';\nimport { TextField, InputAdornment } from '@material-ui/core';\n\nexport interface PriceInputProps {\n    label: string;\n    name: string;\n    percentage?: boolean;\n    value?: number;\n    handleChange(price: number | undefined): void;\n}\n\nexport const PriceInputField: React.FC<PriceInputProps> = ({ label, name, percentage, value, handleChange }) => {\n    const innerHandleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        let payload: number | undefined = parseFloat(event.target.value);\n        if (isNaN(payload)) {\n            payload = undefined;\n        }\n        handleChange(payload);\n    };\n\n    if (percentage) {\n        return (\n            <TextField\n                label={label}\n                variant=\"outlined\"\n                margin=\"normal\"\n                name={name}\n                fullWidth\n                InputProps={{\n                    endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n                }}\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                type=\"number\"\n                inputProps={{\n                    min: 0,\n                    max: 100,\n                }}\n                value={value || ''}\n                onChange={innerHandleChange}\n            />\n        );\n    } else {\n        return (\n            <TextField\n                label={label}\n                variant=\"outlined\"\n                margin=\"normal\"\n                name={name}\n                value={value || ''}\n                fullWidth\n                InputProps={{\n                    startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                }}\n                type=\"number\"\n                onChange={innerHandleChange}\n            />\n        );\n    }\n};\n","import React, { useState } from 'react';\nimport { TextField } from '@material-ui/core';\nimport PersonIcon from '@material-ui/icons/Person';\nimport { AddForm } from './AddForm';\nimport { useDispatch } from 'react-redux';\nimport { addPerson } from '../state/actions';\nimport { PriceInputField } from './PriceInputField';\n\ninterface PersonFormState {\n    name: string;\n    basePrice?: number;\n}\n\ninterface NameEditProps {\n    title: string;\n    editId?: number;\n}\n\nconst NameEdit: React.FC<NameEditProps> = ({ title, editId }) => {\n    const [formState, setFormState] = useState<PersonFormState>({ name: '' });\n\n    const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        const value = event.target.value;\n        setFormState(state => ({ ...state, name: value }));\n    };\n\n    const dispatch = useDispatch();\n\n    const handleSubmit = (): void => {\n        if (formState.name !== '' && formState.basePrice && formState.basePrice > 0) {\n            if (editId) {\n                console.log('Edit dispatch: ' + editId);\n            } else {\n                dispatch(addPerson(formState.name, formState.basePrice));\n            }\n            setFormState({\n                name: '',\n                basePrice: undefined,\n            });\n        }\n    };\n\n    return (\n        <AddForm title={title} Icon={PersonIcon} handleSubmit={handleSubmit}>\n            <TextField\n                label=\"Name\"\n                variant=\"outlined\"\n                margin=\"normal\"\n                name=\"name\"\n                value={formState.name}\n                fullWidth\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                onChange={handleNameChange}\n            />\n            <PriceInputField\n                label=\"Base Price\"\n                name=\"basePrice\"\n                value={formState.basePrice}\n                handleChange={(price: number | undefined): void => {\n                    setFormState(state => ({ ...state, basePrice: price }));\n                }}\n            />\n        </AddForm>\n    );\n};\n\nexport const AddName: React.FC = () => {\n    return <NameEdit title=\"Add a new person\" />;\n};\n","import { ADD_PERSON, ADD_EXPENSE, RESET_STATE, REMOVE_EXPENSE } from './types';\nimport { ExpenseKind } from '../expenseKind';\n\nexport interface ResetAction {\n    type: typeof RESET_STATE;\n}\n\nexport interface AddPersonAction {\n    type: typeof ADD_PERSON;\n    name: string;\n    basePrice: number;\n}\n\nexport interface AddExpenseAction {\n    type: typeof ADD_EXPENSE;\n    name: string;\n    kind: ExpenseKind;\n    payload: number;\n}\n\nexport interface RemoveExpenseAction {\n    type: typeof REMOVE_EXPENSE;\n    id: number;\n}\n\nexport type RootAction = ResetAction | AddPersonAction | AddExpenseAction | RemoveExpenseAction;\n\nexport const resetState = (): ResetAction => {\n    return {\n        type: RESET_STATE,\n    };\n};\n\nexport const addPerson = (name: string, basePrice: number): AddPersonAction => {\n    return {\n        type: ADD_PERSON,\n        name,\n        basePrice,\n    };\n};\n\nexport const addExpense = (name: string, kind: ExpenseKind, payload: number): AddExpenseAction => {\n    return {\n        type: ADD_EXPENSE,\n        name,\n        kind,\n        payload,\n    };\n};\n\nexport const removeExpense = (id: number): RemoveExpenseAction => {\n    return {\n        type: REMOVE_EXPENSE,\n        id,\n    };\n};\n","import React, { useState } from 'react';\nimport { TextField, makeStyles, FormControl, InputLabel, Select, MenuItem, Grid } from '@material-ui/core';\nimport MoneyIcon from '@material-ui/icons/Money';\nimport { AddForm } from './AddForm';\nimport { ExpenseKind } from '../expenseKind';\nimport { useDispatch } from 'react-redux';\nimport { addExpense } from '../state/actions';\nimport { PriceInputField } from './PriceInputField';\n\nconst useStyles = makeStyles(theme => ({\n    formRow: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    formRowItemLeft: {\n        [theme.breakpoints.up('sm')]: {\n            paddingRight: theme.spacing(1),\n        },\n    },\n    formRowItemRight: {\n        [theme.breakpoints.up('sm')]: {\n            paddingLeft: theme.spacing(1),\n        },\n    },\n}));\n\ninterface ExpenseFormState {\n    name: string;\n    kind: ExpenseKind;\n    payload?: number;\n}\n\nexport const AddExpense: React.FC = () => {\n    const classes = useStyles();\n\n    const [formState, setFormState] = useState<ExpenseFormState>({\n        name: '',\n        kind: ExpenseKind.SplitEqually,\n    });\n\n    const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        if (event.target) {\n            const value = event.target.value;\n            setFormState(state => ({ ...state, name: value }));\n        }\n    };\n\n    const handleSelectChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>): void => {\n        const value = event.target.value as ExpenseKind;\n        setFormState(state => ({ ...state, kind: value }));\n    };\n\n    const dispatch = useDispatch();\n\n    const handleSubmit = (): void => {\n        if (formState.name !== '' && formState.payload && formState.payload > 0) {\n            dispatch(addExpense(formState.name, formState.kind, formState.payload));\n            setFormState({\n                name: '',\n                kind: ExpenseKind.SplitEqually,\n                payload: undefined,\n            });\n        }\n    };\n\n    return (\n        <AddForm title=\"Add a new expense\" Icon={MoneyIcon} handleSubmit={handleSubmit}>\n            <TextField\n                label=\"Name\"\n                name=\"name\"\n                variant=\"outlined\"\n                margin=\"normal\"\n                fullWidth\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                value={formState.name}\n                onChange={handleNameChange}\n            />\n            <Grid container>\n                <Grid item xs={12} sm={6} className={classes.formRowItemLeft}>\n                    <FormControl margin=\"normal\" fullWidth>\n                        <InputLabel id=\"kind-select-label\" variant=\"outlined\">\n                            Kind\n                        </InputLabel>\n                        <Select\n                            labelId=\"kind-select-label\"\n                            labelWidth={40}\n                            fullWidth\n                            value={formState.kind}\n                            variant=\"outlined\"\n                            onChange={handleSelectChange}\n                        >\n                            <MenuItem value={ExpenseKind.Percentage}>Percentage</MenuItem>\n                            <MenuItem value={ExpenseKind.SplitEqually}>Split equally</MenuItem>\n                            <MenuItem value={ExpenseKind.SplitProportionally}>Split proportionally</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={6} className={classes.formRowItemRight}>\n                    <PriceInputField\n                        label=\"Price\"\n                        name=\"price\"\n                        percentage={formState.kind === ExpenseKind.Percentage}\n                        value={formState.payload}\n                        handleChange={(price: number | undefined): void => {\n                            setFormState(state => ({ ...state, payload: price }));\n                        }}\n                    />\n                </Grid>\n            </Grid>\n        </AddForm>\n    );\n};\n","import React from 'react';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles, Drawer, IconButton, Divider, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { resetState } from '../state/actions';\n\nconst useStyles = makeStyles(theme => ({\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        padding: theme.spacing(0, 1),\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-end',\n    },\n}));\n\nexport const LeftMenu: React.FC<{ open: boolean; closeCallback(): void }> = ({ open, closeCallback }) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const handleReset = (): void => {\n        dispatch(resetState());\n        closeCallback();\n    };\n\n    return (\n        <Drawer open={open}>\n            <div className={classes.drawerHeader}>\n                <IconButton onClick={closeCallback}>\n                    <ChevronLeftIcon />\n                </IconButton>\n            </div>\n            <Divider />\n            <List>\n                <ListItem button onClick={handleReset}>\n                    <ListItemIcon>\n                        <DeleteIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Reset\" />\n                </ListItem>\n            </List>\n        </Drawer>\n    );\n};\n","import React from 'react';\nimport {\n    List,\n    ListItem,\n    ListItemText,\n    Paper,\n    makeStyles,\n    ListItemSecondaryAction,\n    IconButton,\n} from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Expense } from '../state/types';\nimport { ExpenseKind, expenseKindToString } from '../expenseKind';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { expensesSelector } from '../state/selectors';\nimport { removeExpense } from '../state/actions';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nconst ExpenseHistoryItem: React.FC<{ expense: Expense }> = ({ expense }) => {\n    const payloadFormatted = expense.kind === ExpenseKind.Percentage ? `${expense.payload}%` : `$${expense.payload}`;\n    const primaryText = `${expense.name} - ${payloadFormatted}`;\n\n    const dispatch = useDispatch();\n\n    const handleClick = (): void => {\n        dispatch(removeExpense(expense.id));\n    };\n\n    return (\n        <ListItem>\n            <ListItemText primary={primaryText} secondary={expenseKindToString(expense.kind)} />\n            <ListItemSecondaryAction>\n                <IconButton edge=\"end\" onClick={handleClick}>\n                    <DeleteIcon />\n                </IconButton>\n            </ListItemSecondaryAction>\n        </ListItem>\n    );\n};\n\nexport const ExpenseHistory: React.FC = () => {\n    const classes = useStyles();\n    const expenses = useSelector(expensesSelector);\n\n    if (expenses.length === 0) {\n        return null;\n    }\n\n    return (\n        <Paper className={classes.root} elevation={3}>\n            <List>\n                {expenses.map(expense => {\n                    return <ExpenseHistoryItem expense={expense} key={expense.id} />;\n                })}\n            </List>\n        </Paper>\n    );\n};\n","import React, { useState } from 'react';\nimport {\n    Paper,\n    makeStyles,\n    Typography,\n    Button,\n    FormControl,\n    InputLabel,\n    OutlinedInput,\n    InputAdornment,\n} from '@material-ui/core';\nimport DialPadIcon from '@material-ui/icons/Dialpad';\nimport { evaluate } from '../maths/parser';\nimport { Alert } from '@material-ui/lab';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(2),\n        padding: theme.spacing(2),\n    },\n    headerIcon: {\n        marginRight: theme.spacing(1),\n    },\n    header: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    alert: {\n        marginTop: theme.spacing(1),\n    },\n    result: {\n        padding: theme.spacing(1),\n        backgroundColor: '#f5f5f5',\n    },\n}));\n\nexport const Calculator: React.FC = () => {\n    const classes = useStyles();\n    const [content, setContent] = useState('');\n    const [result, setResult] = useState<number | null>(null);\n    const [error, setError] = useState<string | null>(null);\n\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n        try {\n            const value = evaluate(content);\n            setResult(value);\n        } catch (err) {\n            setError(err.message || err.toString());\n        }\n    };\n\n    return (\n        <Paper className={classes.root} elevation={3}>\n            <div className={classes.header}>\n                <DialPadIcon fontSize=\"large\" className={classes.headerIcon} />\n                <Typography variant=\"h5\">Calculator</Typography>\n            </div>\n            {error && (\n                <Alert severity=\"error\" className={classes.alert}>\n                    {error}\n                </Alert>\n            )}\n            <form onSubmit={handleSubmit}>\n                <FormControl variant=\"outlined\" fullWidth margin=\"normal\">\n                    <InputLabel htmlFor=\"calculator-input\">Input</InputLabel>\n                    <OutlinedInput\n                        id=\"calculator-input\"\n                        value={content}\n                        onChange={(event): void => {\n                            setContent(event.target.value);\n                        }}\n                        endAdornment={\n                            <InputAdornment position=\"end\">\n                                <Button color=\"primary\" variant=\"contained\" size=\"large\" type=\"submit\">\n                                    =\n                                </Button>\n                            </InputAdornment>\n                        }\n                        labelWidth={40}\n                    />\n                </FormControl>\n            </form>\n            {result && (\n                <Paper elevation={2} className={classes.result}>\n                    <Typography variant=\"subtitle1\"> = {result}</Typography>\n                </Paper>\n            )}\n        </Paper>\n    );\n};\n","import React, { useState } from 'react';\nimport { AppBar, Toolbar, IconButton, Typography, Container, Grid, CssBaseline } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CheckTable } from './components/CheckTable';\nimport { AddName } from './components/AddName';\nimport { AddExpense } from './components/AddExpense';\nimport { LeftMenu } from './components/LeftMenu';\nimport { ExpenseHistory } from './components/ExpenseHistory';\nimport { Calculator } from './components/Calculator';\n\nconst useStyles = makeStyles(theme => ({\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    container: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n}));\n\nconst App: React.FC = () => {\n    const classes = useStyles();\n\n    const [isMenuOpened, setMenuOpened] = useState(false);\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        className={classes.menuButton}\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        onClick={(): void => setMenuOpened(true)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Check Splitter\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <LeftMenu open={isMenuOpened} closeCallback={(): void => setMenuOpened(false)} />\n            <Container fixed className={classes.container}>\n                <CheckTable />\n                <Grid container spacing={3}>\n                    <Grid item xs={12} sm={4}>\n                        <AddName />\n                    </Grid>\n                    <Grid item xs={12} sm={8}>\n                        <AddExpense />\n                    </Grid>\n                </Grid>\n                <Calculator />\n                <ExpenseHistory />\n            </Container>\n        </React.Fragment>\n    );\n};\n\nexport default App;\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import {\n    ADD_PERSON,\n    ADD_EXPENSE,\n    RESET_STATE,\n    PeopleState,\n    ExpensesState,\n    defaultExpensesState,\n    REMOVE_EXPENSE,\n} from './types';\nimport { RootAction } from './actions';\nimport { combineReducers } from 'redux';\n\nconst peopleReducer = (state: PeopleState = [], action: RootAction): PeopleState => {\n    switch (action.type) {\n        case ADD_PERSON:\n            const person = { name: action.name, basePrice: action.basePrice };\n            return [...state, person];\n        case RESET_STATE:\n            return [];\n        default:\n            return state;\n    }\n};\n\nconst expensesReducer = (state: ExpensesState = defaultExpensesState, action: RootAction): ExpensesState => {\n    switch (action.type) {\n        case ADD_EXPENSE:\n            const expense = { id: state.counter, name: action.name, kind: action.kind, payload: action.payload };\n            return {\n                counter: state.counter + 1,\n                expenses: [...state.expenses, expense],\n            };\n        case REMOVE_EXPENSE:\n            return {\n                counter: state.counter,\n                expenses: state.expenses.filter(expense => expense.id !== action.id),\n            };\n        case RESET_STATE:\n            return defaultExpensesState;\n        default:\n            return state;\n    }\n};\n\nexport const reducer = combineReducers({\n    people: peopleReducer,\n    expenses: expensesReducer,\n});\n\nexport type State = ReturnType<typeof reducer>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { reducer } from './state/reducers';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { storeState, loadState } from './model/localstorage';\n\nconst loadedState = loadState() || undefined;\n\nconst store = createStore(reducer, loadedState, composeWithDevTools());\n\nstore.subscribe(() => {\n    const state = store.getState();\n    storeState(state);\n});\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import { State } from '../state/reducers';\nimport { stateVersion } from '../state/types';\n\nconst LOCAL_STORAGE_KEY = 'check-splitter-state';\n\nexport const loadState = (key = LOCAL_STORAGE_KEY): State | null => {\n    try {\n        const item = window.localStorage.getItem(key);\n        if (!item) {\n            return null;\n        }\n\n        const payload = item ? JSON.parse(item) : null;\n        if ('version' in payload && payload.version === stateVersion) {\n            return payload.state;\n        } else {\n            return null;\n        }\n    } catch (error) {\n        console.error(error);\n        return null;\n    }\n};\n\nexport const storeState = (state: State, key = LOCAL_STORAGE_KEY): void => {\n    const payload = {\n        version: stateVersion,\n        state,\n    };\n    try {\n        window.localStorage.setItem(key, JSON.stringify(payload));\n    } catch (error) {\n        console.error(error);\n    }\n};\n"],"sourceRoot":""}