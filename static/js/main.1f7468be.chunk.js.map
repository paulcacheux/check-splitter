{"version":3,"sources":["expenseKind.ts","model/calculator.ts","CheckTable.tsx","components/AddButton.tsx","components/AddForm.tsx","AddName.tsx","state/actions.ts","state/types.ts","AddExpense.tsx","App.tsx","serviceWorker.ts","state/reducers.ts","index.tsx","model/localstorage.ts"],"names":["ExpenseKind","PersonWithExpenses","person","expenses","total","this","payload","kind","peopleCount","totalPrice","Percentage","push","basePrice","SplitEqually","SplitProportionally","percent","reduce","a","b","StyledTableCell","withStyles","theme","createStyles","head","backgroundColor","palette","secondary","main","color","common","white","TableCell","useStyles","makeStyles","root","width","marginTop","spacing","marginBottom","table","maxHeight","CheckTable","classes","people","useSelector","state","peopleWithExpenses","length","map","personWithExpenses","expense","addExpense","finalize","computeExpenses","Paper","className","elevation","TableContainer","Table","stickyHeader","TableHead","TableRow","align","index","key","name","TableBody","AddButton","Button","variant","size","type","startIcon","padding","headerIcon","marginRight","header","display","alignItems","AddForm","title","Icon","handleSubmit","children","fontSize","Typography","onSubmit","event","preventDefault","AddName","useState","formState","setFormState","handleChange","fieldName","target","fieldValue","value","parseFloat","isNaN","dispatch","useDispatch","PersonIcon","TextField","label","margin","fullWidth","InputLabelProps","shrink","onChange","InputProps","startAdornment","InputAdornment","position","formRow","justifyContent","formRowItemLeft","breakpoints","up","paddingRight","formRowItemRight","paddingLeft","AddExpense","MoneyIcon","Grid","container","item","xs","sm","FormControl","InputLabel","id","Select","labelId","labelWidth","MenuItem","endAdornment","inputProps","min","max","menuButton","flexGrow","drawerHeader","mixins","toolbar","LeftMenu","open","closeCallback","Drawer","IconButton","onClick","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","App","isMenuOpened","setMenuOpened","Fragment","CssBaseline","AppBar","Toolbar","edge","aria-label","Container","fixed","Boolean","window","location","hostname","match","defaultState","loadedState","localStorage","getItem","JSON","parse","error","console","loadState","undefined","store","createStore","action","composeWithDevTools","subscribe","setItem","stringify","storeState","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1f7468be.chunk.js","sourcesContent":["export enum ExpenseKind {\n    Percentage,\n    SplitEqually,\n    SplitProportionally,\n}\n","import { Person, Expense } from '../state/types';\nimport { ExpenseKind } from '../expenseKind';\n\nexport class PersonWithExpenses {\n    person: Person;\n    expenses: Array<number>;\n    total: number;\n\n    constructor(person: Person) {\n        this.person = person;\n        this.expenses = [];\n        this.total = 0.0;\n    }\n\n    addExpense(payload: number, kind: ExpenseKind, peopleCount: number, totalPrice: number): void {\n        switch (kind) {\n            case ExpenseKind.Percentage:\n                this.expenses.push((payload * this.person.basePrice) / 100);\n                break;\n            case ExpenseKind.SplitEqually:\n                this.expenses.push(payload / peopleCount);\n                break;\n            case ExpenseKind.SplitProportionally:\n                const percent = this.person.basePrice / totalPrice;\n                this.expenses.push(percent * payload);\n                break;\n        }\n    }\n\n    finalize(): void {\n        this.total = this.person.basePrice + this.expenses.reduce((a, b) => a + b, 0);\n    }\n}\n\nexport const computeExpenses = (people: Array<Person>, expenses: Array<Expense>): Array<PersonWithExpenses> => {\n    const peopleCount = people.length;\n    const totalPrice = people.map(person => person.basePrice).reduce((a, b) => a + b, 0);\n    return people.map(person => {\n        const personWithExpenses = new PersonWithExpenses(person);\n        for (const expense of expenses) {\n            personWithExpenses.addExpense(expense.payload, expense.kind, peopleCount, totalPrice);\n        }\n        personWithExpenses.finalize();\n        return personWithExpenses;\n    });\n};\n","import React from 'react';\nimport {\n    Paper,\n    Table,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    makeStyles,\n    withStyles,\n    createStyles,\n} from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { State } from './state/types';\nimport { computeExpenses } from './model/calculator';\n\ninterface Row {\n    name: string;\n    basePrice: number;\n    tip: number;\n}\n\nconst StyledTableCell = withStyles(theme => {\n    return createStyles({\n        head: {\n            backgroundColor: theme.palette.secondary.main,\n            color: theme.palette.common.white,\n        },\n    });\n})(TableCell);\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        maxHeight: '50vh',\n    },\n}));\n\nexport const CheckTable: React.FC = () => {\n    const classes = useStyles();\n\n    const people = useSelector((state: State) => state.people);\n    const expenses = useSelector((state: State) => state.expenses);\n\n    const peopleWithExpenses = computeExpenses(people, expenses);\n\n    return (\n        <Paper className={classes.root} elevation={3}>\n            <TableContainer className={classes.table}>\n                <Table stickyHeader>\n                    <TableHead>\n                        <TableRow>\n                            <StyledTableCell align=\"left\">Name</StyledTableCell>\n                            <StyledTableCell align=\"right\">Base Price</StyledTableCell>\n                            {expenses.map((expense, index) => {\n                                return (\n                                    <StyledTableCell align=\"right\" key={index}>\n                                        {expense.name}\n                                    </StyledTableCell>\n                                );\n                            })}\n                            <StyledTableCell align=\"right\">Total</StyledTableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {peopleWithExpenses.map((person, index) => {\n                            return (\n                                <TableRow key={index}>\n                                    <TableCell align=\"left\">{person.person.name}</TableCell>\n                                    <TableCell align=\"right\">{person.person.basePrice}</TableCell>\n                                    {person.expenses.map((expense, index) => {\n                                        return (\n                                            <TableCell align=\"right\" key={index}>\n                                                {expense}\n                                            </TableCell>\n                                        );\n                                    })}\n                                    <TableCell align=\"right\">{person.total}</TableCell>\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </Paper>\n    );\n};\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\n\nexport const AddButton: React.FC = () => {\n    return (\n        <Button color=\"primary\" variant=\"contained\" size=\"large\" type=\"submit\" startIcon={<AddIcon />}>\n            Add\n        </Button>\n    );\n};\n","import React from 'react';\nimport { makeStyles, Paper, Typography, SvgIconProps } from '@material-ui/core';\nimport { AddButton } from './AddButton';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n    headerIcon: {\n        marginRight: theme.spacing(1),\n    },\n    header: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\ninterface AddFormProps {\n    title: string;\n    Icon(props: SvgIconProps): JSX.Element;\n    handleSubmit?(event: React.FormEvent<HTMLFormElement>): void;\n}\n\nexport const AddForm: React.FC<AddFormProps> = ({ title, Icon, handleSubmit, children }) => {\n    const classes = useStyles();\n    const preventAndHandleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n        if (handleSubmit) {\n            handleSubmit(event);\n        }\n    };\n\n    return (\n        <Paper elevation={3} className={classes.root}>\n            <div className={classes.header}>\n                <Icon fontSize=\"large\" className={classes.headerIcon} />\n                <Typography variant=\"h5\">{title}</Typography>\n            </div>\n            <form onSubmit={preventAndHandleSubmit}>\n                {children}\n                <AddButton />\n            </form>\n        </Paper>\n    );\n};\n","import React, { useState } from 'react';\nimport { TextField, InputAdornment } from '@material-ui/core';\nimport PersonIcon from '@material-ui/icons/Person';\nimport { AddForm } from './components/AddForm';\nimport { Person } from './state/types';\nimport { useDispatch } from 'react-redux';\nimport { addPerson } from './state/actions';\n\nexport const AddName: React.FC = () => {\n    const [formState, setFormState] = useState<Person>({\n        name: '',\n        basePrice: 0,\n    });\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        const fieldName = event.target.name;\n        const fieldValue = event.target.value;\n        switch (fieldName) {\n            case 'name':\n                setFormState(state => ({ ...state, name: fieldValue }));\n                break;\n            case 'basePrice':\n                let basePrice = parseFloat(fieldValue);\n                if (isNaN(basePrice)) {\n                    basePrice = 0.0;\n                }\n                setFormState(state => ({ ...state, basePrice }));\n                break;\n            default:\n                break;\n        }\n    };\n\n    const dispatch = useDispatch();\n\n    const handleSubmit = (): void => {\n        dispatch(addPerson(formState));\n        setFormState({\n            name: '',\n            basePrice: 0,\n        });\n    };\n\n    return (\n        <AddForm title=\"Add a new person\" Icon={PersonIcon} handleSubmit={handleSubmit}>\n            <TextField\n                label=\"Name\"\n                variant=\"outlined\"\n                margin=\"normal\"\n                name=\"name\"\n                value={formState.name}\n                fullWidth\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                onChange={handleChange}\n            />\n            <TextField\n                label=\"Base Price\"\n                variant=\"outlined\"\n                margin=\"normal\"\n                name=\"basePrice\"\n                value={formState.basePrice}\n                fullWidth\n                InputProps={{\n                    startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                }}\n                type=\"number\"\n                onChange={handleChange}\n            />\n        </AddForm>\n    );\n};\n","import { ADD_PERSON, ADD_EXPENSE, Person, Expense, RESET_STATE } from './types';\n\nexport interface ResetAction {\n    type: typeof RESET_STATE;\n}\n\nexport interface AddPersonAction {\n    type: typeof ADD_PERSON;\n    person: Person;\n}\n\nexport interface AddExpenseAction {\n    type: typeof ADD_EXPENSE;\n    expense: Expense;\n}\n\nexport type RootAction = ResetAction | AddPersonAction | AddExpenseAction;\n\nexport const resetState = (): ResetAction => {\n    return {\n        type: RESET_STATE,\n    };\n};\n\nexport const addPerson = (person: Person): AddPersonAction => {\n    return {\n        type: ADD_PERSON,\n        person,\n    };\n};\n\nexport const addExpense = (expense: Expense): AddExpenseAction => {\n    return {\n        type: ADD_EXPENSE,\n        expense,\n    };\n};\n","import { ExpenseKind } from '../expenseKind';\n\nexport const RESET_STATE = 'RESET_STATE';\nexport const ADD_PERSON = 'ADD_PERSON';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\n\nexport interface Person {\n    name: string;\n    basePrice: number;\n}\n\nexport interface Expense {\n    name: string;\n    payload: number;\n    kind: ExpenseKind;\n}\n\nexport interface State {\n    people: Array<Person>;\n    expenses: Array<Expense>;\n}\n","import React, { useState } from 'react';\nimport {\n    TextField,\n    InputAdornment,\n    makeStyles,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Grid,\n} from '@material-ui/core';\nimport MoneyIcon from '@material-ui/icons/Money';\nimport { AddForm } from './components/AddForm';\nimport { ExpenseKind } from './expenseKind';\nimport { Expense } from './state/types';\nimport { useDispatch } from 'react-redux';\nimport { addExpense } from './state/actions';\n\nconst useStyles = makeStyles(theme => ({\n    formRow: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    formRowItemLeft: {\n        [theme.breakpoints.up('sm')]: {\n            paddingRight: theme.spacing(1),\n        },\n    },\n    formRowItemRight: {\n        [theme.breakpoints.up('sm')]: {\n            paddingLeft: theme.spacing(1),\n        },\n    },\n}));\n\nexport const AddExpense: React.FC = () => {\n    const classes = useStyles();\n\n    const [formState, setFormState] = useState<Expense>({\n        name: '',\n        kind: ExpenseKind.SplitEqually,\n        payload: 0,\n    });\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        const fieldName = event.target.name;\n        const fieldValue = event.target.value;\n\n        switch (fieldName) {\n            case 'name':\n                setFormState(state => ({ ...state, name: fieldValue }));\n                break;\n            case 'kind':\n                break;\n            case 'payload':\n                let payload = parseFloat(fieldValue);\n                if (isNaN(payload)) {\n                    payload = 0.0;\n                }\n                setFormState(state => ({ ...state, payload }));\n                break;\n            default:\n                break;\n        }\n    };\n\n    const handleSelectChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>): void => {\n        const value = event.target.value as ExpenseKind;\n        setFormState(state => ({ ...state, kind: value }));\n    };\n\n    const dispatch = useDispatch();\n\n    const handleSubmit = (): void => {\n        dispatch(addExpense(formState));\n        setFormState({\n            name: '',\n            kind: ExpenseKind.SplitEqually,\n            payload: 0,\n        });\n    };\n\n    return (\n        <AddForm title=\"Add a new expense\" Icon={MoneyIcon} handleSubmit={handleSubmit}>\n            <TextField\n                label=\"Name\"\n                name=\"name\"\n                variant=\"outlined\"\n                margin=\"normal\"\n                fullWidth\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                onChange={handleChange}\n            />\n            <Grid container>\n                <Grid item xs={12} sm={6} className={classes.formRowItemLeft}>\n                    <FormControl margin=\"normal\" fullWidth>\n                        <InputLabel id=\"kind-select-label\" variant=\"outlined\">\n                            Kind\n                        </InputLabel>\n                        <Select\n                            labelId=\"kind-select-label\"\n                            labelWidth={40}\n                            fullWidth\n                            value={formState.kind}\n                            variant=\"outlined\"\n                            onChange={handleSelectChange}\n                        >\n                            <MenuItem value={ExpenseKind.Percentage}>Percentage</MenuItem>\n                            <MenuItem value={ExpenseKind.SplitEqually}>Split equally</MenuItem>\n                            <MenuItem value={ExpenseKind.SplitProportionally}>Split proportionally</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={6} className={classes.formRowItemRight}>\n                    {formState.kind === ExpenseKind.Percentage ? (\n                        <TextField\n                            label=\"Percentage\"\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            name=\"payload\"\n                            fullWidth\n                            InputProps={{\n                                endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n                            }}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            type=\"number\"\n                            inputProps={{\n                                min: 0,\n                                max: 100,\n                            }}\n                            value={formState.payload}\n                            onChange={handleChange}\n                        />\n                    ) : (\n                        <TextField\n                            label=\"Price\"\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            name=\"payload\"\n                            fullWidth\n                            InputProps={{\n                                startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                            }}\n                            type=\"number\"\n                            value={formState.payload}\n                            onChange={handleChange}\n                        />\n                    )}\n                </Grid>\n            </Grid>\n        </AddForm>\n    );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n    AppBar,\n    Toolbar,\n    IconButton,\n    Typography,\n    Container,\n    Grid,\n    Drawer,\n    CssBaseline,\n    Divider,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemIcon,\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CheckTable } from './CheckTable';\nimport { AddName } from './AddName';\nimport { AddExpense } from './AddExpense';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { resetState } from './state/actions';\n\nconst useStyles = makeStyles(theme => ({\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        padding: theme.spacing(0, 1),\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-end',\n    },\n}));\n\nconst LeftMenu: React.FC<{ open: boolean; closeCallback(): void }> = ({ open, closeCallback }) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const handleReset = (): void => {\n        dispatch(resetState());\n        closeCallback();\n    };\n\n    return (\n        <Drawer open={open}>\n            <div className={classes.drawerHeader}>\n                <IconButton onClick={closeCallback}>\n                    <ChevronLeftIcon />\n                </IconButton>\n            </div>\n            <Divider />\n            <List>\n                <ListItem button onClick={handleReset}>\n                    <ListItemIcon>\n                        <DeleteIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Reset\" />\n                </ListItem>\n            </List>\n        </Drawer>\n    );\n};\n\nconst App: React.FC = () => {\n    const classes = useStyles();\n\n    const [isMenuOpened, setMenuOpened] = useState(false);\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        className={classes.menuButton}\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        onClick={(): void => setMenuOpened(true)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Check Splitter\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <LeftMenu open={isMenuOpened} closeCallback={(): void => setMenuOpened(false)} />\n            <Container fixed>\n                <CheckTable />\n                <Grid container spacing={3}>\n                    <Grid item xs={12} sm={4}>\n                        <AddName />\n                    </Grid>\n                    <Grid item xs={12} sm={8}>\n                        <AddExpense />\n                    </Grid>\n                </Grid>\n            </Container>\n        </React.Fragment>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { State, ADD_PERSON, ADD_EXPENSE, RESET_STATE } from './types';\nimport { RootAction } from './actions';\n\nconst defaultState: State = {\n    people: [],\n    expenses: [],\n};\n\nexport const reducer = (state = defaultState, action: RootAction): State => {\n    switch (action.type) {\n        case ADD_PERSON:\n            return { ...state, people: [...state.people, action.person] };\n\n        case ADD_EXPENSE:\n            return { ...state, expenses: [...state.expenses, action.expense] };\n\n        case RESET_STATE:\n            return { ...defaultState };\n\n        default:\n            return state;\n    }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { reducer } from './state/reducers';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { storeState, loadState } from './model/localstorage';\n\nconst loadedState = loadState() || undefined;\n\nconst store = createStore(reducer, loadedState, composeWithDevTools());\n\nstore.subscribe(() => {\n    const state = store.getState();\n    storeState(state);\n});\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { State } from '../state/types';\n\nconst LOCAL_STORAGE_KEY = 'check-splitter-state';\n\nexport const loadState = (key = LOCAL_STORAGE_KEY): State | null => {\n    try {\n        const item = window.localStorage.getItem(key);\n        return item ? JSON.parse(item) : null;\n    } catch (error) {\n        console.error(error);\n        return null;\n    }\n};\n\nexport const storeState = (state: State, key = LOCAL_STORAGE_KEY): void => {\n    try {\n        window.localStorage.setItem(key, JSON.stringify(state));\n    } catch (error) {\n        console.error(error);\n    }\n};\n"],"sourceRoot":""}