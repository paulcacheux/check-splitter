{"version":3,"sources":["expenseKind.ts","model/calculator.ts","state/selectors.ts","CheckTable.tsx","components/AddButton.tsx","components/AddForm.tsx","state/types.ts","components/PriceInputField.tsx","AddName.tsx","state/actions.ts","AddExpense.tsx","components/LeftMenu.tsx","components/ExpenseHistory.tsx","App.tsx","serviceWorker.ts","state/reducers.ts","index.tsx","model/localstorage.ts"],"names":["ExpenseKind","expenseKindToString","kind","Percentage","SplitEqually","SplitProportionally","PersonWithExpenses","person","expenses","total","this","basePrice","reduce","a","b","payload","peopleCount","totalBasePrice","push","getCurrentTotalPrice","percent","peopleSelector","state","people","expensesSelector","StyledTableCell","withStyles","theme","createStyles","head","backgroundColor","palette","secondary","main","color","common","white","TableCell","useStyles","makeStyles","root","width","marginBottom","spacing","table","maxHeight","CheckTable","classes","useSelector","peopleWithExpenses","length","map","personWithExpenses","expense","addExpense","finalize","computeExpenses","Paper","className","elevation","TableContainer","Table","stickyHeader","TableHead","TableRow","align","index","key","name","TableBody","toFixed","AddButton","Button","variant","size","type","startIcon","padding","headerIcon","marginRight","header","display","alignItems","AddForm","title","Icon","handleSubmit","children","fontSize","Typography","onSubmit","event","preventDefault","defaultExpensesState","counter","PriceInputField","label","percentage","value","handleChange","innerHandleChange","parseFloat","target","isNaN","undefined","TextField","margin","fullWidth","InputProps","endAdornment","InputAdornment","position","InputLabelProps","shrink","inputProps","min","max","onChange","startAdornment","AddName","useState","formState","setFormState","dispatch","useDispatch","PersonIcon","price","formRow","justifyContent","formRowItemLeft","breakpoints","up","paddingRight","formRowItemRight","paddingLeft","AddExpense","MoneyIcon","Grid","container","item","xs","sm","FormControl","InputLabel","id","Select","labelId","labelWidth","MenuItem","drawerHeader","mixins","toolbar","LeftMenu","open","closeCallback","Drawer","IconButton","onClick","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","marginTop","ExpenseHistoryItem","payloadFormatted","primaryText","ListItemSecondaryAction","edge","ExpenseHistory","menuButton","flexGrow","App","isMenuOpened","setMenuOpened","Fragment","CssBaseline","AppBar","Toolbar","aria-label","Container","fixed","Boolean","window","location","hostname","match","reducer","combineReducers","action","filter","loadedState","localStorage","getItem","JSON","parse","error","console","loadState","store","createStore","composeWithDevTools","subscribe","setItem","stringify","storeState","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.189991e0.chunk.js","sourcesContent":["export enum ExpenseKind {\n    Percentage,\n    SplitEqually,\n    SplitProportionally,\n}\n\nexport function expenseKindToString(kind: ExpenseKind): string {\n    switch (kind) {\n        case ExpenseKind.Percentage:\n            return 'Percentage';\n        case ExpenseKind.SplitEqually:\n            return 'Split Equally';\n        case ExpenseKind.SplitProportionally:\n            return 'Split Proportionally';\n    }\n}\n","import { Person, Expense } from '../state/types';\nimport { ExpenseKind } from '../expenseKind';\n\nexport class PersonWithExpenses {\n    person: Person;\n    expenses: Array<number>;\n    total: number;\n\n    constructor(person: Person) {\n        this.person = person;\n        this.expenses = [];\n        this.total = 0.0;\n    }\n\n    getCurrentTotalPrice(): number {\n        return this.person.basePrice + this.expenses.reduce((a, b) => a + b, 0);\n    }\n\n    addExpense(payload: number, kind: ExpenseKind, peopleCount: number, totalBasePrice: number): void {\n        switch (kind) {\n            case ExpenseKind.Percentage:\n                this.expenses.push((payload * this.getCurrentTotalPrice()) / 100);\n                break;\n            case ExpenseKind.SplitEqually:\n                this.expenses.push(payload / peopleCount);\n                break;\n            case ExpenseKind.SplitProportionally:\n                const percent = this.person.basePrice / totalBasePrice;\n                this.expenses.push(percent * payload);\n                break;\n        }\n    }\n\n    finalize(): void {\n        this.total = this.getCurrentTotalPrice();\n    }\n}\n\nexport const computeExpenses = (people: Array<Person>, expenses: Array<Expense>): Array<PersonWithExpenses> => {\n    const peopleCount = people.length;\n    const totalBasePrice = people.map(person => person.basePrice).reduce((a, b) => a + b, 0);\n    return people.map(person => {\n        const personWithExpenses = new PersonWithExpenses(person);\n        for (const expense of expenses) {\n            personWithExpenses.addExpense(expense.payload, expense.kind, peopleCount, totalBasePrice);\n        }\n        personWithExpenses.finalize();\n        return personWithExpenses;\n    });\n};\n","import { State } from './reducers';\nimport { Person, Expense } from './types';\n\nexport const peopleSelector = (state: State): Array<Person> => {\n    return state.people;\n};\n\nexport const expensesSelector = (state: State): Array<Expense> => {\n    return state.expenses.expenses;\n};\n","import React from 'react';\nimport {\n    Paper,\n    Table,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    makeStyles,\n    withStyles,\n    createStyles,\n} from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { computeExpenses } from './model/calculator';\nimport { peopleSelector, expensesSelector } from './state/selectors';\n\ninterface Row {\n    name: string;\n    basePrice: number;\n    tip: number;\n}\n\nconst StyledTableCell = withStyles(theme => {\n    return createStyles({\n        head: {\n            backgroundColor: theme.palette.secondary.main,\n            color: theme.palette.common.white,\n        },\n    });\n})(TableCell);\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        maxHeight: '50vh',\n    },\n}));\n\nexport const CheckTable: React.FC = () => {\n    const classes = useStyles();\n\n    const people = useSelector(peopleSelector);\n    const expenses = useSelector(expensesSelector);\n\n    const peopleWithExpenses = computeExpenses(people, expenses);\n\n    return (\n        <Paper className={classes.root} elevation={3}>\n            <TableContainer className={classes.table}>\n                <Table stickyHeader>\n                    <TableHead>\n                        <TableRow>\n                            <StyledTableCell align=\"left\">Name</StyledTableCell>\n                            <StyledTableCell align=\"right\">Base Price</StyledTableCell>\n                            {expenses.map((expense, index) => {\n                                return (\n                                    <StyledTableCell align=\"right\" key={index}>\n                                        {expense.name}\n                                    </StyledTableCell>\n                                );\n                            })}\n                            <StyledTableCell align=\"right\">Total</StyledTableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {peopleWithExpenses.map((person, index) => {\n                            return (\n                                <TableRow key={index}>\n                                    <TableCell align=\"left\">{person.person.name}</TableCell>\n                                    <TableCell align=\"right\">{person.person.basePrice.toFixed(2)}</TableCell>\n                                    {person.expenses.map((expense, index) => {\n                                        return (\n                                            <TableCell align=\"right\" key={index}>\n                                                {expense.toFixed(2)}\n                                            </TableCell>\n                                        );\n                                    })}\n                                    <TableCell align=\"right\">{person.total.toFixed(2)}</TableCell>\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </Paper>\n    );\n};\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\n\nexport const AddButton: React.FC = () => {\n    return (\n        <Button color=\"primary\" variant=\"contained\" size=\"large\" type=\"submit\" startIcon={<AddIcon />}>\n            Add\n        </Button>\n    );\n};\n","import React from 'react';\nimport { makeStyles, Paper, Typography, SvgIconProps } from '@material-ui/core';\nimport { AddButton } from './AddButton';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n    headerIcon: {\n        marginRight: theme.spacing(1),\n    },\n    header: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\ninterface AddFormProps {\n    title: string;\n    Icon(props: SvgIconProps): JSX.Element;\n    handleSubmit?(event: React.FormEvent<HTMLFormElement>): void;\n}\n\nexport const AddForm: React.FC<AddFormProps> = ({ title, Icon, handleSubmit, children }) => {\n    const classes = useStyles();\n    const preventAndHandleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n        if (handleSubmit) {\n            handleSubmit(event);\n        }\n    };\n\n    return (\n        <Paper elevation={3} className={classes.root}>\n            <div className={classes.header}>\n                <Icon fontSize=\"large\" className={classes.headerIcon} />\n                <Typography variant=\"h5\">{title}</Typography>\n            </div>\n            <form onSubmit={preventAndHandleSubmit}>\n                {children}\n                <AddButton />\n            </form>\n        </Paper>\n    );\n};\n","import { ExpenseKind } from '../expenseKind';\n\nexport const RESET_STATE = 'RESET_STATE';\nexport const ADD_PERSON = 'ADD_PERSON';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const REMOVE_EXPENSE = 'REMOVE_EXPENSE';\n\nexport interface Person {\n    name: string;\n    basePrice: number;\n}\n\nexport interface Expense {\n    id: number;\n    name: string;\n    payload: number;\n    kind: ExpenseKind;\n}\n\nexport type PeopleState = Array<Person>;\n\nexport interface ExpensesState {\n    counter: number;\n    expenses: Array<Expense>;\n}\n\nexport const defaultExpensesState: ExpensesState = {\n    counter: 0,\n    expenses: [],\n};\n","import React from 'react';\nimport { TextField, InputAdornment } from '@material-ui/core';\n\nexport interface PriceInputProps {\n    label: string;\n    name: string;\n    percentage?: boolean;\n    value?: number;\n    handleChange(price: number | undefined): void;\n}\n\nexport const PriceInputField: React.FC<PriceInputProps> = ({ label, name, percentage, value, handleChange }) => {\n    const innerHandleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        let payload: number | undefined = parseFloat(event.target.value);\n        if (isNaN(payload)) {\n            payload = undefined;\n        }\n        handleChange(payload);\n    };\n\n    if (percentage) {\n        return (\n            <TextField\n                label={label}\n                variant=\"outlined\"\n                margin=\"normal\"\n                name={name}\n                fullWidth\n                InputProps={{\n                    endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n                }}\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                type=\"number\"\n                inputProps={{\n                    min: 0,\n                    max: 100,\n                }}\n                value={value || ''}\n                onChange={innerHandleChange}\n            />\n        );\n    } else {\n        return (\n            <TextField\n                label={label}\n                variant=\"outlined\"\n                margin=\"normal\"\n                name={name}\n                value={value || ''}\n                fullWidth\n                InputProps={{\n                    startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                }}\n                type=\"number\"\n                onChange={innerHandleChange}\n            />\n        );\n    }\n};\n","import React, { useState } from 'react';\nimport { TextField } from '@material-ui/core';\nimport PersonIcon from '@material-ui/icons/Person';\nimport { AddForm } from './components/AddForm';\nimport { useDispatch } from 'react-redux';\nimport { addPerson } from './state/actions';\nimport { PriceInputField } from './components/PriceInputField';\n\ninterface PersonFormState {\n    name: string;\n    basePrice?: number;\n}\n\nexport const AddName: React.FC = () => {\n    const [formState, setFormState] = useState<PersonFormState>({ name: '' });\n\n    const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        const value = event.target.value;\n        setFormState(state => ({ ...state, name: value }));\n    };\n\n    const dispatch = useDispatch();\n\n    const handleSubmit = (): void => {\n        if (formState.name !== '' && formState.basePrice && formState.basePrice > 0) {\n            dispatch(addPerson(formState.name, formState.basePrice));\n            setFormState({\n                name: '',\n                basePrice: undefined,\n            });\n        }\n    };\n\n    return (\n        <AddForm title=\"Add a new person\" Icon={PersonIcon} handleSubmit={handleSubmit}>\n            <TextField\n                label=\"Name\"\n                variant=\"outlined\"\n                margin=\"normal\"\n                name=\"name\"\n                value={formState.name}\n                fullWidth\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                onChange={handleNameChange}\n            />\n            <PriceInputField\n                label=\"Base Price\"\n                name=\"basePrice\"\n                value={formState.basePrice}\n                handleChange={(price: number | undefined): void => {\n                    setFormState(state => ({ ...state, basePrice: price }));\n                }}\n            />\n        </AddForm>\n    );\n};\n","import { ADD_PERSON, ADD_EXPENSE, RESET_STATE, REMOVE_EXPENSE } from './types';\nimport { ExpenseKind } from '../expenseKind';\n\nexport interface ResetAction {\n    type: typeof RESET_STATE;\n}\n\nexport interface AddPersonAction {\n    type: typeof ADD_PERSON;\n    name: string;\n    basePrice: number;\n}\n\nexport interface AddExpenseAction {\n    type: typeof ADD_EXPENSE;\n    name: string;\n    kind: ExpenseKind;\n    payload: number;\n}\n\nexport interface RemoveExpenseAction {\n    type: typeof REMOVE_EXPENSE;\n    id: number;\n}\n\nexport type RootAction = ResetAction | AddPersonAction | AddExpenseAction | RemoveExpenseAction;\n\nexport const resetState = (): ResetAction => {\n    return {\n        type: RESET_STATE,\n    };\n};\n\nexport const addPerson = (name: string, basePrice: number): AddPersonAction => {\n    return {\n        type: ADD_PERSON,\n        name,\n        basePrice,\n    };\n};\n\nexport const addExpense = (name: string, kind: ExpenseKind, payload: number): AddExpenseAction => {\n    return {\n        type: ADD_EXPENSE,\n        name,\n        kind,\n        payload,\n    };\n};\n\nexport const removeExpense = (id: number): RemoveExpenseAction => {\n    return {\n        type: REMOVE_EXPENSE,\n        id,\n    };\n};\n","import React, { useState } from 'react';\nimport { TextField, makeStyles, FormControl, InputLabel, Select, MenuItem, Grid } from '@material-ui/core';\nimport MoneyIcon from '@material-ui/icons/Money';\nimport { AddForm } from './components/AddForm';\nimport { ExpenseKind } from './expenseKind';\nimport { useDispatch } from 'react-redux';\nimport { addExpense } from './state/actions';\nimport { PriceInputField } from './components/PriceInputField';\n\nconst useStyles = makeStyles(theme => ({\n    formRow: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    formRowItemLeft: {\n        [theme.breakpoints.up('sm')]: {\n            paddingRight: theme.spacing(1),\n        },\n    },\n    formRowItemRight: {\n        [theme.breakpoints.up('sm')]: {\n            paddingLeft: theme.spacing(1),\n        },\n    },\n}));\n\ninterface ExpenseFormState {\n    name: string;\n    kind: ExpenseKind;\n    payload?: number;\n}\n\nexport const AddExpense: React.FC = () => {\n    const classes = useStyles();\n\n    const [formState, setFormState] = useState<ExpenseFormState>({\n        name: '',\n        kind: ExpenseKind.SplitEqually,\n    });\n\n    const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        if (event.target) {\n            const value = event.target.value;\n            setFormState(state => ({ ...state, name: value }));\n        }\n    };\n\n    const handleSelectChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>): void => {\n        const value = event.target.value as ExpenseKind;\n        setFormState(state => ({ ...state, kind: value }));\n    };\n\n    const dispatch = useDispatch();\n\n    const handleSubmit = (): void => {\n        if (formState.name !== '' && formState.payload && formState.payload > 0) {\n            dispatch(addExpense(formState.name, formState.kind, formState.payload));\n            setFormState({\n                name: '',\n                kind: ExpenseKind.SplitEqually,\n                payload: undefined,\n            });\n        }\n    };\n\n    return (\n        <AddForm title=\"Add a new expense\" Icon={MoneyIcon} handleSubmit={handleSubmit}>\n            <TextField\n                label=\"Name\"\n                name=\"name\"\n                variant=\"outlined\"\n                margin=\"normal\"\n                fullWidth\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                value={formState.name}\n                onChange={handleNameChange}\n            />\n            <Grid container>\n                <Grid item xs={12} sm={6} className={classes.formRowItemLeft}>\n                    <FormControl margin=\"normal\" fullWidth>\n                        <InputLabel id=\"kind-select-label\" variant=\"outlined\">\n                            Kind\n                        </InputLabel>\n                        <Select\n                            labelId=\"kind-select-label\"\n                            labelWidth={40}\n                            fullWidth\n                            value={formState.kind}\n                            variant=\"outlined\"\n                            onChange={handleSelectChange}\n                        >\n                            <MenuItem value={ExpenseKind.Percentage}>Percentage</MenuItem>\n                            <MenuItem value={ExpenseKind.SplitEqually}>Split equally</MenuItem>\n                            <MenuItem value={ExpenseKind.SplitProportionally}>Split proportionally</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={6} className={classes.formRowItemRight}>\n                    <PriceInputField\n                        label=\"Price\"\n                        name=\"price\"\n                        percentage={formState.kind === ExpenseKind.Percentage}\n                        value={formState.payload}\n                        handleChange={(price: number | undefined): void => {\n                            setFormState(state => ({ ...state, payload: price }));\n                        }}\n                    />\n                </Grid>\n            </Grid>\n        </AddForm>\n    );\n};\n","import React from 'react';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles, Drawer, IconButton, Divider, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { resetState } from '../state/actions';\n\nconst useStyles = makeStyles(theme => ({\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        padding: theme.spacing(0, 1),\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-end',\n    },\n}));\n\nexport const LeftMenu: React.FC<{ open: boolean; closeCallback(): void }> = ({ open, closeCallback }) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const handleReset = (): void => {\n        dispatch(resetState());\n        closeCallback();\n    };\n\n    return (\n        <Drawer open={open}>\n            <div className={classes.drawerHeader}>\n                <IconButton onClick={closeCallback}>\n                    <ChevronLeftIcon />\n                </IconButton>\n            </div>\n            <Divider />\n            <List>\n                <ListItem button onClick={handleReset}>\n                    <ListItemIcon>\n                        <DeleteIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Reset\" />\n                </ListItem>\n            </List>\n        </Drawer>\n    );\n};\n","import React from 'react';\nimport {\n    List,\n    ListItem,\n    ListItemText,\n    Paper,\n    makeStyles,\n    ListItemSecondaryAction,\n    IconButton,\n} from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Expense } from '../state/types';\nimport { ExpenseKind, expenseKindToString } from '../expenseKind';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { expensesSelector } from '../state/selectors';\nimport { removeExpense } from '../state/actions';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nconst ExpenseHistoryItem: React.FC<{ expense: Expense }> = ({ expense }) => {\n    const payloadFormatted = expense.kind === ExpenseKind.Percentage ? `${expense.payload}%` : `$${expense.payload}`;\n    const primaryText = `${expense.name} - ${payloadFormatted}`;\n\n    const dispatch = useDispatch();\n\n    const handleClick = (): void => {\n        dispatch(removeExpense(expense.id));\n    };\n\n    return (\n        <ListItem>\n            <ListItemText primary={primaryText} secondary={expenseKindToString(expense.kind)} />\n            <ListItemSecondaryAction>\n                <IconButton edge=\"end\" onClick={handleClick}>\n                    <DeleteIcon />\n                </IconButton>\n            </ListItemSecondaryAction>\n        </ListItem>\n    );\n};\n\nexport const ExpenseHistory: React.FC = () => {\n    const classes = useStyles();\n    const expenses = useSelector(expensesSelector);\n\n    if (expenses.length === 0) {\n        return null;\n    }\n\n    return (\n        <Paper className={classes.root} elevation={3}>\n            <List>\n                {expenses.map((expense, index) => {\n                    return <ExpenseHistoryItem expense={expense} key={index} />;\n                })}\n            </List>\n        </Paper>\n    );\n};\n","import React, { useState } from 'react';\nimport { AppBar, Toolbar, IconButton, Typography, Container, Grid, CssBaseline } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CheckTable } from './CheckTable';\nimport { AddName } from './AddName';\nimport { AddExpense } from './AddExpense';\nimport { LeftMenu } from './components/LeftMenu';\nimport { ExpenseHistory } from './components/ExpenseHistory';\n\nconst useStyles = makeStyles(theme => ({\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    container: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n}));\n\nconst App: React.FC = () => {\n    const classes = useStyles();\n\n    const [isMenuOpened, setMenuOpened] = useState(false);\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        className={classes.menuButton}\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        onClick={(): void => setMenuOpened(true)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Check Splitter\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <LeftMenu open={isMenuOpened} closeCallback={(): void => setMenuOpened(false)} />\n            <Container fixed className={classes.container}>\n                <CheckTable />\n                <Grid container spacing={3}>\n                    <Grid item xs={12} sm={4}>\n                        <AddName />\n                    </Grid>\n                    <Grid item xs={12} sm={8}>\n                        <AddExpense />\n                    </Grid>\n                </Grid>\n                <ExpenseHistory />\n            </Container>\n        </React.Fragment>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    ADD_PERSON,\n    ADD_EXPENSE,\n    RESET_STATE,\n    PeopleState,\n    ExpensesState,\n    defaultExpensesState,\n    REMOVE_EXPENSE,\n} from './types';\nimport { RootAction } from './actions';\nimport { combineReducers } from 'redux';\n\nconst peopleReducer = (state: PeopleState = [], action: RootAction): PeopleState => {\n    switch (action.type) {\n        case ADD_PERSON:\n            const person = { name: action.name, basePrice: action.basePrice };\n            return [...state, person];\n        case RESET_STATE:\n            return [];\n        default:\n            return state;\n    }\n};\n\nconst expensesReducer = (state: ExpensesState = defaultExpensesState, action: RootAction): ExpensesState => {\n    switch (action.type) {\n        case ADD_EXPENSE:\n            const expense = { id: state.counter, name: action.name, kind: action.kind, payload: action.payload };\n            return {\n                counter: state.counter + 1,\n                expenses: [...state.expenses, expense],\n            };\n        case REMOVE_EXPENSE:\n            return {\n                counter: state.counter,\n                expenses: state.expenses.filter(expense => expense.id !== action.id),\n            };\n        case RESET_STATE:\n            return defaultExpensesState;\n        default:\n            return state;\n    }\n};\n\nexport const reducer = combineReducers({\n    people: peopleReducer,\n    expenses: expensesReducer,\n});\n\nexport type State = ReturnType<typeof reducer>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { reducer } from './state/reducers';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { storeState, loadState } from './model/localstorage';\n\nconst loadedState = loadState() || undefined;\n\nconst store = createStore(reducer, loadedState, composeWithDevTools());\n\nstore.subscribe(() => {\n    const state = store.getState();\n    storeState(state);\n});\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { State } from '../state/reducers';\n\nconst LOCAL_STORAGE_KEY = 'check-splitter-state';\n\nexport const loadState = (key = LOCAL_STORAGE_KEY): State | null => {\n    try {\n        const item = window.localStorage.getItem(key);\n        return item ? JSON.parse(item) : null;\n    } catch (error) {\n        console.error(error);\n        return null;\n    }\n};\n\nexport const storeState = (state: State, key = LOCAL_STORAGE_KEY): void => {\n    try {\n        window.localStorage.setItem(key, JSON.stringify(state));\n    } catch (error) {\n        console.error(error);\n    }\n};\n"],"sourceRoot":""}